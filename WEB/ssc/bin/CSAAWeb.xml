<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSAAWeb</name>
    </assembly>
    <members>
        <member name="T:CSAAWeb.AppLogger.Logger">
             <summary>
             Contains class methods for logging messages.
             </summary>
             <remarks>
             <para>
             To use Logger, the module CSAAWeb.Web.LogModule must be installed within the web
             application.  See <see cref="T:CSAAWeb.Web.LogModule"/> for installation details.
             </para>
             <para>
             Path for logging must be in web.config as ApplicationLogPath.  If this value ends with "\", the 
             top level application namespace will be prepended to the file name.  If it is missing, then application 
             will attempt to log into the Application Event Log.  In order to allow this the following key must be 
             added to the system registry:
             </para>
             <code>
            Windows Registry Editor Version 5.00
            [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Eventlog\Application\CSAAWeb AppLogger]
            "TypesSupported"=dword:00000007
            "EventMessageFile"="C:\\WINNT\\Microsoft.NET\\Framework\\v1.0.3705\\EventLogMessages.dll"
             </code>
             <para>
             However, if this entry hasn't been made Logger will instead try to log it in the application log as
             an ASP.NET event. 
             </para>
             <seealso cref="T:CSAAWeb.Web.LogModule"/>
             <seealso cref="M:CSAAWeb.Config.ExpandedSetting(System.String)"/>
             <seealso cref="T:CSAAWeb.Queue"/>
             </remarks>
             <example>
             <para>Here is a sample web.config file for using LogModule:</para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            
                &lt;appSettings&gt;
                    &lt;!--ApplicationLogPath determines where LogModule will place log files. It can be an absolute path,
                    or it can be an expanded path.  Acceptable variables for expansion are %SiteRootPath% which will	
                    be expanded to a path under the virtual directory of the application or %RootPath% which will be
                    expanded to a path under the web server root. If this value ends with "\", the top level application namespace
                    will be prepended to the file name.  If it is missing, then application will attempt to
                    log into the Application Event Log.  
                    NOTE: VERY IMPORTANT! ASP.NET must have write permissions to this directory!--&gt;
                    &lt;add key="ApplicationLogPath" value="%SiteRootPath%data\Logs\" /&gt;
            
            &lt;/configuration&gt;
             </code>
             </example>
        </member>
        <member name="F:CSAAWeb.AppLogger.Logger._LogPath">
            <summary>The path to create log files.</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.Trace(System.String@,System.String@)">
            <summary>
            Parses the stack trace to retrieve namespace and simple trace information.
            </summary>
            <param name="Service">Initially contains Environment.StackTrace, returns short trace string.</param>
            <param name="Process">Returns with Top level namespace.</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.Caller">
            <summary>
            Gets the full name of the calling procedure.
            </summary>
            <returns>Calling procedure</returns>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.AppNameSpace">
            <summary>
            Gets the top level application namespace.
            </summary>
            <returns>Application namespace</returns>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.Log(System.String)">
            <summary>
            Logs Message to the currect log file, with stack trace information.
            </summary>
            <param name="Message">Message to log.</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.Log(System.Exception)">
            <summary>
            Logs Exception to the currect log file, with stack trace information.
            </summary>
            <param name="e">Exception to log.</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.Log(System.Exception,System.Boolean)">
            <summary>
            Logs Exception to the currect log file, with stack trace information.  If
            IgnoreCaller is true, only looks at exception stack trace.
            </summary>
            <param name="e">Exception to log.</param>
            <param name="IgnoreCaller">True if stack trace considered only from exception.</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.LogApplicationMessage(System.String,System.String,System.String,System.String)">
            <summary>
            Writes msg to the file specified.
            </summary>
            <param name="path">File path to create log file.</param>
            <param name="module">Name of module</param>
            <param name="location">Location within module</param>
            <param name="msg">Message to write.</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.LogToFile(System.String,System.String,System.String)">
            <summary>
            Writes msg to path.  Creates a critical section to allow multiple threads accessing the file.
            </summary>
            <param name="path">The path where the file exists.</param>
            <param name="file">The base file name</param>
            <param name="msg">The message to write.</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.LogToFile(System.String,System.String)">
            <summary>
            Writes msg to file.
            </summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.LogApplicationMessage(System.String,System.String,System.String,System.Exception)">
            <summary>
            Writes the exception information to the file specified.
            </summary>
            <param name="path">File path to create log file.</param>
            <param name="module">Name of module</param>
            <param name="location">Location within module</param>
            <param name="ex">The exception to log</param>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.IsIgnoreable(System.Exception)">
            <summary>
            Returns true if e is one of the types of exceptions that shouldn't be
            automatically logged.
            </summary>
            <param name="e"></param>
            <returns>Boolean true if e shouldn't be logged.</returns>
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.ArcsightLog">
            <summary>
            //67811A0 - PCI Remediation for Payment systems CH1 : Added for Arcsight logging
            Invoke the RecordApplicationEventAsyncService and Log the details.
            </summary>
            
        </member>
        <member name="M:CSAAWeb.AppLogger.Logger.FillExtension">
            <summary>
            Fill the key value pairs in extensions
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSAAWeb.AppLogger.Logger.LogPath">
            <summary>The path to create log files.</summary>
        </member>
        <member name="P:CSAAWeb.AppLogger.Logger.Time">
            <summary>
            //67811A0 - PCI Remediation for Payment systems CH1 : Added for Arcsight logging - Properties for Arcsight service
            
            </summary>
            
        </member>
        <member name="T:CSAAWeb.AppLogger.LogRecord">
            <summary>
            Class used to queue file logging messages
            </summary>
        </member>
        <member name="T:CSAAWeb.QueueItem">
            <summary>Forms a base class for queued items.</summary>
        </member>
        <member name="T:CSAAWeb.IQueued">
            <summary>Interface for objects that are to be queued.</summary>
        </member>
        <member name="M:CSAAWeb.IQueued.Run">
            <summary>Action to take on dequeue.</summary>
        </member>
        <member name="M:CSAAWeb.IQueued.Reset">
            <summary>Resets status to waiting.</summary>
        </member>
        <member name="P:CSAAWeb.IQueued.Status">
            <summary>Results of run.</summary>
        </member>
        <member name="M:CSAAWeb.QueueItem.Run">
            <summary>Action to take on dequeue.</summary>
        </member>
        <member name="M:CSAAWeb.QueueItem.Reset">
            <summary>Resets status to waiting.</summary>
        </member>
        <member name="P:CSAAWeb.QueueItem.Status">
            <summary/>
        </member>
        <member name="M:CSAAWeb.AppLogger.LogRecord.#ctor(System.String,System.String)">
            <summary/>
        </member>
        <member name="F:CSAAWeb.AppLogger.LogRecord.Path">
            <summary/>
        </member>
        <member name="F:CSAAWeb.AppLogger.LogRecord.Message">
            <summary/>
        </member>
        <member name="M:CSAAWeb.AppLogger.LogRecord.Run">
            <summary/>
        </member>
        <member name="T:CSAAWeb.AppLogger.SoapLogger">
             <summary>
             Soap extenstion allows for automatic logging of exceptions in web services.
             </summary>
             <remarks>
             To use this Soap Extension Filter, you must also install the CSAAWeb.Web.LogModule.
             See <see cref="T:CSAAWeb.Web.LogModule"/> for installation details.
             <seealso cref="T:CSAAWeb.Web.LogModule"/>
             <seealso cref="T:CSAAWeb.AppLogger.Logger"/>
             </remarks>
             <example>
             <para>Here is a typical web.config for using this extension:</para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            
               &lt;appSettings&gt;
                  &lt;!-- Soap Logging --&gt;
                  &lt;add key="Service_LogSoapCalls" value="true"/&gt;
                  &lt;add key="Service_LogSoapComplexTypes" value="false"/&gt;
                  &lt;add key="Service_LogSoapOutput" value="false"/&gt;
                  &lt;add key="Service_LogSoapInput" value="false"/&gt;
                  &lt;add key="Service_SoapFaultActor" value="false"/&gt;
               &lt;/appSettings&gt;
               
               &lt;system.web&gt;
            	    &lt;webServices&gt;
            	      &lt;soapExtensionTypes&gt;
            	        &lt;add type="CSAAWeb.AppLogger.SoapLogger, csaaweb" priority="1" group="0" /&gt;
            	      &lt;/soapExtensionTypes&gt;
            	    &lt;/webServices&gt;
            	  &lt;/system.web&gt;
            	  
            &lt;/configuration&gt;
            	</code>
             </example>
        </member>
        <member name="F:CSAAWeb.AppLogger.SoapLogger.SoapErrorMessage">
            <summary>
            If not blank will cause the exception detail and stack trace information to be replaced
            by its value on Soap calls.  This property can be set by the web.config key:
            Service_SoapErrorMessage
            </summary>
        </member>
        <member name="F:CSAAWeb.AppLogger.SoapLogger.LogSoapInput">
            <summary>
            If true will cause all soap input to be logged.  Use this setting
            only for debugging.  This property can be set by the web.config key:
            Service_LogSoapInput.
            </summary>
            <remarks>
            WARNING: This will log any input data including passwords
            and credit card values as unencrypted text.  This setting should
            only be used during debugging and on non-production servers!
            </remarks>
        </member>
        <member name="F:CSAAWeb.AppLogger.SoapLogger.LogSoapOutput">
            <summary>
            If true will cause all soap output to be logged.  Use this setting
            only for debugging.  This property can be set by the web.config key:
            Service_LogSoapOutput.
            </summary>
        </member>
        <member name="F:CSAAWeb.AppLogger.SoapLogger.LogSoapCalls">
            <summary>
            If true will cause every soap call to be logged along with its parameters.
            This property can be set by the web.config key: Service_LogSoapCalls.
            </summary>
            <remarks>
            If LogComplexTypes is false, complex parameters will be noted in the log as
            existing, but the actual value will not be stored, preserving the integrity
            of passwords and credit card numbers passed-in.  Simple parameters will be
            logged however.  The value of specific parameter name "password" (not 
            case-sensitive) will be masked and not logged, but any other simple parameters
            will be.  To preserve the security of credit card numbers when logging soap 
            messages, these should be buried in complex types that are not logged.
            </remarks>
        </member>
        <member name="F:CSAAWeb.AppLogger.SoapLogger.LogSoapComplexTypes">
            <summary>
            If true, when logging soap calls, will serialize parameters of types SimpleSerializer 
            and ArrayOfSimpleSerializer, otherwise, will simply name the type.  Use this
            setting only for debugging.  This property can be set by the web.config key:
            Service_LogSoapComplexTypes
            </summary>
            <remarks>
            WARNING: This will log any input parameters stored in complex data types
            including passwords and credit card values as unencrypted text.  
            This setting should only be used during debugging and on non-production 
            servers!
            </remarks>
        </member>
        <member name="F:CSAAWeb.AppLogger.SoapLogger.SoapFaultActor">
            <summary>
            If present, this value will be entered into the output stream as the Actor property for any 
            SOAP Fault.  This property can be set by the web.config key: Service_SoapFaultActor
            </summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.ChainStream(System.IO.Stream)">
            <summary>Captures the stream if we are not passing through exception information.</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.GetInitializer(System.Type)">
            <summary>Required method does nothing in this class</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.GetInitializer(System.Web.Services.Protocols.LogicalMethodInfo,System.Web.Services.Protocols.SoapExtensionAttribute)">
            <summary>Required method does nothing in this class</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.Initialize(System.Object)">
            <summary>Required method does nothing in this class</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.ProcessMessage(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            When called with a message that contains an exception.  Logs the exception.
            </summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.ProcessStream(System.Exception)">
            <summary>
            If we are not passing exception information (Service_SoapErrorMessage!="" in web.config),
            this is required to copy the result to the actual output in the case of no exception,
            or to transform the exception faultstring to our default message if there was an exception.
            </summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.Log(System.String)">
            <summary>Logs the stream.</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.ReadStream(System.IO.Stream)">
            <summary>
            Reads and returns the contents of the stream, resetting it to its original position.
            </summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.Log(System.Boolean)">
            <summary>
            Logs the current call.
            </summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.Log(System.Exception)">
            <summary>
            This is called to log an exception.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.LogHeader(System.Web.Services.Protocols.SoapMessage)">
            <summary>Returns the beginning of the log message.</summary>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.Log(System.Web.Services.Protocols.SoapMessage)">
            <summary>
            This method logs soap method calls.
            </summary>
            <param name="Msg"></param>
        </member>
        <member name="M:CSAAWeb.AppLogger.SoapLogger.LogInParameter(System.Reflection.ParameterInfo,System.Object,System.Boolean)">
            <summary>
            Returns a string representing the input parameter P with its value.
            </summary>
            <param name="P">ParameterInfo for the parameter</param>
            <param name="Value">Value of the parameter</param>
            <param name="LogComplexTypes">True if complex types should have value logged.</param>
            <returns>String</returns>
        </member>
        <member name="T:CSAAWeb.AppLogger.LogExtensionAttribute">
            <summary>
            This attribute is applied to a web service method to cause automatic
            logging of any unhandled exception.
            </summary>
        </member>
        <member name="P:CSAAWeb.AppLogger.LogExtensionAttribute.ExtensionType">
            <summary/>
        </member>
        <member name="P:CSAAWeb.AppLogger.LogExtensionAttribute.Priority">
            <summary/>
        </member>
        <member name="T:CSAAWeb.Config">
             <summary>
             Contains class functions for retrieving configuration data.
             </summary>
             <remarks>
             <para>
             This class should be used for retrieving all configuration data.  Methods are
             provided for retreiving ConfigurationSetting.AppSetting values as strings boolean
             and integers that provide default values if the key isn't present ("", false and 0 respectively).
             ExpandedSetting is a method that retrieves strings with value that need to be
             based on specific paths or names relative to the current web application.
             </para>
             <para>
             This class also allows values to be placed in a file, server.config, that is at
             the root of the server, that are independent of the normal ASP.NET configuration
             path.  This is particularly useful for server-dependent values such as database
             connection strings.  This allows application settings in web.config to be copied
             along with application files between different environments safely without overwriting
             values that are server-dependent.  Values that are in server.config will be retrieved
             by calls to Config.Setting (or other methods) seemlessly as if they were in web.config.
             Following the standard .NET configuration methodology, values in web.config will
             override identical values in server.config.
             </para>
             <para>
             In addition to the &lt;add key="name" value="value"/&gt; syntax used in web.config
             server.config has additional syntax options for database connections and web services
             to be compatible with the original design from Congnizant for this file.  Additionally,
             the root element name is ignored, and all appSetting values are contained within
             an "Application" tag within an "Environment" tag.  The selected "Environment" tag
             is determined by the "DeployedEnvironment tag, which may either specify a value or
             be blank, forcing the selection of the Enviromnent tag matching the MachineName property
             of the running web server.
             </para>
             </remarks>
             <example>
             <para>
             Here is a sample server.config file:
             </para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;ConnectionStrings&gt;
                &lt;DeployedEnvironment&gt;DEVELOPMENT&lt;/DeployedEnvironment&gt;
                &lt;Environment Name="DEVELOPMENT"&gt;
                    &lt;General"&gt;
            	           &lt;!--Add settings for all applications here--&gt;
                        &lt;!--add key="Error_Url" value=" /forms/general_error.aspx"/--&gt;
                    &lt;/General&gt;
            
                    &lt;Application Name="Application1"&gt;
                        &lt;!-- Web services --&gt;
                        &lt;!-- Normal syntax --&gt;
                        &lt;add key="WebService.Orders1" value="http://localhost/services/order1.asmx" /&gt;
                        &lt;add key="WebService.Orders1.Credentials" value="User,Password" /&gt;
                        &lt;add key="WebService.Orders1.EncryptedCredentials" value="false" /&gt;
                        &lt;!-- Alternate syntax --&gt;
                        &lt;WebService Service="WebService.Order2" Url="http://localhost/services/order2.asmx" Credentials="User,Password" EncryptedCredentials="false"/&gt;
                        &lt;!--add key="Error_Url" value=" /forms/general_error.aspx"/--&gt;
                    &lt;/Application&gt;
            
                    &lt;Application Name="Services"&gt;
                        &lt;!--Connection strings--&gt;
                        &lt;!-- Normal syntax --&gt;
                        &lt;add key="ConnectionString.Orders1" value="server=localhost;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=Orders1;"/&gt;
                        &lt;add key="ConnectionsString.Orders1.Encrypted" value="false"/&gt;
                        &lt;!-- Alternate syntax --&gt;
                        &lt;Connection Name=" Orders2" value="server=localhost;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog=Orders2;" encrypted="false"/&gt;
                    &lt;/Application&gt;
                &lt;/Environment&gt;
            &lt;/ConnectionStrings&gt;
             </code>
             </example>
        </member>
        <member name="F:CSAAWeb.Config.SiteRoot">
            <summary>The "/" terminated relative Url of the application's root folder. (lowercase)</summary>
        </member>
        <member name="F:CSAAWeb.Config.SiteRootPath">
            <summary>The "\" terminated directory path of the application's root folder. (lowercase)</summary>
        </member>
        <member name="F:CSAAWeb.Config.RootPath">
            <summary>The "\" terminated directory path of the server's root folder. (lowercase)</summary>
        </member>
        <member name="F:CSAAWeb.Config.AppName">
            <summary>The simple friendly name of this web application. (Propercase)</summary>
        </member>
        <member name="F:CSAAWeb.Config.Initialized">
            <summary>True if the initialization of this component is done.</summary>
        </member>
        <member name="M:CSAAWeb.Config.ExpandedSetting(System.String)">
            <summary>
            Function for returning a configuration string, expanding %SiteRoot%, %SiteRootPath%, %RootPath% and %AppName%.
            </summary>
            <param name="Key">The configuration key to get</param>
            <returns>the value of key.</returns>
        </member>
        <member name="M:CSAAWeb.Config.Setting(System.String)">
            <summary>
            Function for returning a configuration string.
            </summary>
            <param name="Key">The configuration key to get</param>
            <returns>the value of key.</returns>
            <remarks>
            Checks web.config first, then if not found, checks server.config if it exists.
            Always returns a string; will be "" if key is not found.
            </remarks>
        </member>
        <member name="M:CSAAWeb.Config.Setting(System.String,System.String)">
            <summary>
            Returns an appSetting value from web.config.
            </summary>
            <param name="Key">The configuration key to get</param>
            <param name="EncryptionKey">Encryption key to decrypt value</param>
            <returns>Value of key.</returns>
        </member>
        <member name="M:CSAAWeb.Config.GetAttribute(System.Xml.XmlElement,System.String)">
            <summary>
            Does a case-insensitive search of the attributes and returns the matching value.
            </summary>
        </member>
        <member name="M:CSAAWeb.Config.GetElement(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            Returns the Child element of E with TagName having Name attribute matching Name 
            (case insensitive)
            </summary>
        </member>
        <member name="M:CSAAWeb.Config.AddSetting(System.String,System.String)">
            <summary>
            Adds or replaces Key value pair.
            </summary>
        </member>
        <member name="M:CSAAWeb.Config.Init">
            <summary>
            Reads the server.config file and loads appropriate
            settings into MachineSettings dictionary.
            </summary>
        </member>
        <member name="M:CSAAWeb.Config.AddSettings(System.Xml.XmlElement)">
            <summary>
            Adds the settings from El into the app's config settings.
            </summary>
            <param name="El">Xml Element to add settings from.</param>
        </member>
        <member name="M:CSAAWeb.Config.InitWatcher(System.String,System.String)">
            <summary>
            Creates the watcher and starts it to watching for changes in server.config
            </summary>
        </member>
        <member name="M:CSAAWeb.Config.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Creates a semaphore in the bin directory, causing the application to unload.
            </summary>
            <remarks>
            Note that this requires the ASPNET to have write and modify privliges for
            the bin directory, which is a security concern.  So on production systems
            This will fail, and it will be necessary to do iisreset to affect changes.
            Any other exception is logged.
            </remarks>
        </member>
        <member name="M:CSAAWeb.Config.iSetting(System.String)">
            <summary>Gets an integer setting value.</summary>
        </member>
        <member name="M:CSAAWeb.Config.iSetting(System.String,System.Int32)">
            <summary>Gets an integer setting value, with default value Result.</summary>
        </member>
        <member name="M:CSAAWeb.Config.bSetting(System.String)">
            <summary>Gets a boolean setting value.</summary>
        </member>
        <member name="M:CSAAWeb.Config.bSetting(System.String,System.Boolean)">
            <summary>Gets a boolean setting value, with default value Result.</summary>
        </member>
        <member name="M:CSAAWeb.Config.SettingArray(System.String,System.String)">
            <summary>
            Get an arraylist of a configuration setting based on the value in web.config
            named Name split on ','
            </summary>
            <param name="Key">The configuration key to get</param>
            <param name="EncryptionKey">Encryption key to decrypt value</param>
            <returns>Array of Values in key.</returns>
        </member>
        <member name="M:CSAAWeb.Config.SettingArray(System.String)">
            <summary>
            Get an arraylist of a configuration setting from web.config.
            </summary>
            <param name="Key">The configuration key to get</param>
            <returns>Array of Values in key.</returns>
        </member>
        <member name="M:CSAAWeb.Config.SettingArray(System.String,System.Char,System.Boolean)">
            <summary>
            Get an arraylist of a configuration setting from web.config.
            </summary>
            <param name="Key">The configuration key to get</param>
            <param name="Splitter">Char on which to split the array.</param>
            <param name="ToLower">True if values should be converted to lower case.</param>
            <returns>Array of Values in key.</returns>
        </member>
        <member name="M:CSAAWeb.Config.SettingArray(System.String,System.Char,System.Boolean,System.String)">
            <summary>
            Get an arraylist of a configuration setting, based on the value split into
            an array on splitter.  
            </summary>
            <param name="Key">The config string Key.</param>
            <param name="Splitter">The char to spit the string on.</param>
            <param name="ToLower">Set to true to change all values to lower case.</param>
            <param name="EncryptionKey">Encryption key to decrypt value</param>
            <returns>Array of Values in key.</returns>
        </member>
        <member name="M:CSAAWeb.Config.Initialize(System.Web.UI.Control)">
            <summary>
            Initializes default values from the config file; matches config
            values with O.GetType().Name + "_" + [Field/Property Name]
            </summary>
            <param name="O">Object to initialize values for.</param>
        </member>
        <member name="T:CSAAWeb.Constants">
            <summary>
            Contains application constants.
            </summary>
        </member>
        <member name="F:CSAAWeb.Constants.MBR_ID_LENGTH">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.CLUB_CODE_LENGTH">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.ASSOC_ID_LENGTH">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.DATE_FORMAT">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.MSG_GENERAL_ERROR">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.IK_STRING">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.CS_STRING">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.AD_ERR_INVALID">
            RFC 185138 - AD Integration - CH1 START - Added the below constants
        </member>
        <member name="F:CSAAWeb.Constants.PYMT_PUP">
            RFC 185138 - AD Integration - CH1 END - Added the below constants
        </member>
        <member name="F:CSAAWeb.Constants.MIN_USERNAME_LENGTH">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.MIN_PASSWORD_LENGTH">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Constants.MAX_PASSWORD_LENGTH">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Cryptor">
            <summary>
            Provides class methods for encrypting and decrypting.
            </summary>
        </member>
        <member name="M:CSAAWeb.Cryptor.Decrypt(System.String,System.String)">
            <summary>
            Decyrpts Value encrypted with Encrypt using Key.
            </summary>
        </member>
        <member name="M:CSAAWeb.Cryptor.Encrypt(System.String,System.String)">
            <summary>
            Encyrpts Value using Key.
            </summary>
        </member>
        <member name="M:CSAAWeb.Cryptor.CheckDigit(System.String)">
            <summary>
            Generates a Mod-10 (Luhn) check digit for st
            </summary>
            <param name="st">Input string (must be an integer)</param>
            <returns>Check digit character</returns>
        </member>
        <member name="M:CSAAWeb.Cryptor.CreditCardCheckDigit(System.String)">
            <summary>
            Method that validates the given Credit Number is valid or not
            </summary>
            <param name="st">Credit Card input parameter</param>
            <returns>0 means Success else failure</returns>
        </member>
        <member name="T:CSAAWeb.Crypto">
            <summary>
            Class for Encrypting and Decrypting data through the windows Crypto API
            </summary>
        </member>
        <member name="F:CSAAWeb.Crypto.ThrowEncryptionErrors">
            <summary>
            Set to true if an exception should be thrown when encryption/decryption errors are encountered.
            When false, encrypt/decrypt will simply return an empty string on error.
            </summary>
        </member>
        <member name="M:CSAAWeb.Crypto.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:CSAAWeb.Crypto.Finalize">
            <summary>Release any handles and free the Encoder</summary>
        </member>
        <member name="M:CSAAWeb.Crypto.Encrypt(System.String,System.String)">
            <summary>
            Added method based on RijndaelManaged standard
            </summary>
            <param name="plainText"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Crypto.Decrypt(System.String,System.String)">
            <summary>
            Added method based on RijndaelManaged standard
            </summary>
            <param name="cipherText"></param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Crypto.DeriveKey(System.String)">
            <summary>
            Derives a 128-bit private key from password using the Microsoft Enhanced provider with
            MD5 hash and RC2 encryption.  Handles to the provider, hash and key are placed in the 
            appropritate private properties, which can then be used by the calling method.  These
            handles are released when this object is terminated.
            </summary>
            <param name="Password">The password from which the private key is derived.</param>
        </member>
        <member name="M:CSAAWeb.Crypto.ToHex(System.Byte[])">
            <summary>
            Converts the byte array to a hexadecimal string.
            </summary>
            <param name="st">The byte array to convert.</param>
            <returns>Hex string representation of st.</returns>
        </member>
        <member name="M:CSAAWeb.Crypto.FromHex(System.String)">
            <summary>
            Converts the hexadecimal string st to a byte array.
            </summary>
            <param name="st">The hex string to convert.</param>
            <returns>Array of bytes represented in st.</returns>
        </member>
        <member name="T:CSAAWeb.BusinessRuleException">
            <summary>
            Used for non-critical (application) exceptions that are required by
            business rules but that do not need to be logged by automatic logging
            faclilties.
            </summary>
        </member>
        <member name="M:CSAAWeb.BusinessRuleException.#ctor(System.String)">
            <summary>Creates a new instance of BusinessRuleException with message and Level=Warning</summary>
            <param name="Message">The error message;</param>
        </member>
        <member name="M:CSAAWeb.BusinessRuleException.#ctor(System.String,CSAAWeb.BusinessRuleLevel)">
            <summary>Creates a new instance of BusinessRuleException with message and Level</summary>
            <param name="Message">The error message;</param>
            <param name="Level">The BusinessRuleLevel of this exception.</param>
        </member>
        <member name="M:CSAAWeb.BusinessRuleException.#ctor(System.Data.SqlClient.SqlException)">
            <summary>Creates a new instance of from an SqlException</summary>
            <param name="Exception">The original SqlException</param>
            <remarks>Level will be Warning if Exception.Class&lt;16) otherwise Severe</remarks>
        </member>
        <member name="P:CSAAWeb.BusinessRuleException.Level">
            <summary>
            Gets the BusinessRuleLevel for this exception.
            </summary>
        </member>
        <member name="P:CSAAWeb.BusinessRuleException.Message">
            <summary>The actual message of the exception.</summary>
        </member>
        <member name="T:CSAAWeb.BusinessRuleLevel">
            <summary>
            Enum for the BusinessRuleException Level property.
            </summary>
        </member>
        <member name="F:CSAAWeb.BusinessRuleLevel.Warning">
            <summary>This Exception is a warning, the transaction may be recoverable with corrective action.</summary>
        </member>
        <member name="F:CSAAWeb.BusinessRuleLevel.Severe">
            <summary>This Exception is severe, the transaction can not be recovered.</summary>
        </member>
        <member name="T:CSAAWeb.Filter.FilterEvent">
            <summary>
            Delegate for a filtering function to be called when the filtering stream's
            write method is called.
            </summary>
        </member>
        <member name="T:CSAAWeb.Filter.HtmlFilter">
            <summary>
            This class is a simple Html Response Filter.  I contains a property, OnWrite
            that is a delegate for a filter to be provided by the creating page class.  If
            this property is not null, when the filter's write function is called, this filter
            function will be called.
            </summary>
        </member>
        <member name="F:CSAAWeb.Filter.HtmlFilter._sink">
            <summary>The underlying output stream.</summary>
        </member>
        <member name="F:CSAAWeb.Filter.HtmlFilter._position">
            <summary>Backer for Position property.</summary>
        </member>
        <member name="F:CSAAWeb.Filter.HtmlFilter.OnWrite">
            <summary>Delegate for filter event.</summary>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.#ctor(System.IO.Stream)">
            <summary>
            Constructor accepting the stream to write to.
            </summary>
            <param name="sink">The output stream</param>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.#ctor(System.IO.Stream,CSAAWeb.Filter.FilterEvent)">
            <summary>
            Constructor accepting the output stream and the filter delegate.
            </summary>
            <param name="sink">Output stream</param>
            <param name="OnWrite">Filter Delegate</param>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Seek a position in the stream</summary>
            <param name="offset">Number of bytes to move.</param>
            <param name="direction">Direction to seek.</param>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.SetLength(System.Int64)">
            <summary>Sets the length of the stream</summary>
            <param name="length">Length to set.</param>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.Close">
            <summary>Closes the stream.</summary>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.Flush">
            <summary>Flushes the stream to the output.</summary>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads from the stream</summary>
        </member>
        <member name="M:CSAAWeb.Filter.HtmlFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes to the stream.  This is where the work is
            accomplished.  If OnWrite delegate is set, calls that
            delegate method to do the filtering.</summary>
        </member>
        <member name="P:CSAAWeb.Filter.HtmlFilter.CanRead">
            <summary>This stream is readable.</summary>
        </member>
        <member name="P:CSAAWeb.Filter.HtmlFilter.CanSeek">
            <summary>This stream can seek.</summary>
        </member>
        <member name="P:CSAAWeb.Filter.HtmlFilter.CanWrite">
            <summary>This stream can be written to.</summary>
        </member>
        <member name="P:CSAAWeb.Filter.HtmlFilter.Length">
            <summary>Stream has length of zero</summary>
        </member>
        <member name="P:CSAAWeb.Filter.HtmlFilter.Position">
            <summary>Position in the stream.</summary>
        </member>
        <member name="T:CSAAWeb.Filter.FilterBuffer">
            <summary>
            FilterBuffer encapsulates the incoming byte buffer, positioning in that buffer, and
            the output stream.  Methods are provided to locate things in the buffer, to extract 
            strings from it, to tranfer from the buffer to the output stream, and to write strings
            to the output stream.
            </summary>
        </member>
        <member name="F:CSAAWeb.Filter.FilterBuffer.offset">
            <summary>Offset in the buffer.</summary>
        </member>
        <member name="F:CSAAWeb.Filter.FilterBuffer.Last">
            <summary>Last position in the buffer.</summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.#ctor(System.Byte[],System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="buffer"></param>
            <param name="sink"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.Write(System.String)">
            <summary>
            Writes st to the output stream.
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.Write(System.Int32)">
            <summary>
            Transfers bytes from the buffer to the output stream.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.Write">
            <summary>
            Transfers the remainder of the bytes from the buffer to the output.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.IndexOf(System.Char)">
            <summary>
            Returns the first position within buffer following offset that ch is found.
            </summary>
            <param name="ch">Char to seek.</param>
            <returns>The position</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.IndexOf(System.Char,System.Int32)">
            <summary>
            Returns the first position within buffer following From that ch is found.
            </summary>
            <param name="ch">Char to seek.</param>
            <param name="From">position to seek from</param>
            <returns>The position</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.LastIndexOf(System.Char)">
            <summary>
            Returns the last position of ch prior to the end of the buffer
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.LastIndexOf(System.Char,System.Int32)">
            <summary>
            Returns the last position of ch within buffer prior to From
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.Seek(System.Int32)">
            <summary>
            Moves the offset to i
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.SkipWhiteSpace(System.Int32,System.Boolean)">
            <summary>
            CheckCR backs up in the stream from the found tag passed any previous
            white space.
            </summary>
            <returns>Modified value of i</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.SkipWhiteSpace(System.Int32)">
            <summary>
            Skips forward in the buffer past any white space.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterBuffer.ToString(System.Int32,System.Int32)">
            <summary>
            Returns a string of characters from the buffer.
            </summary>
            <param name="From">Start char</param>
            <param name="To">Last char</param>
            <returns></returns>
        </member>
        <member name="T:CSAAWeb.Filter.HttpFilteredWriter">
            <summary>
            HttpFilteredWriter is a class used to replace the page's HtmlTextWriter's
            InnerWriter property.  It wraps the stream of innerwriter with a filter supplied
            by the TagFilter Filter provided to the constructor.  This class replaces all
            the methods provided by the InnerWriter with its own.  This class is provided because
            the OutputStream property of the InnerWriter, an HttpWriter class object, is
            read only, and so can't be replaced directly.  These methods are not documented
            here because they are identical in definition to those of the HttpWriter, although
            they do not operate identically, because the HttpWriter flushes after each call to write.
            This does not flush until the flush method is called.
            </summary>
        </member>
        <member name="T:CSAAWeb.Filter.TagFilter">
            <summary>
            Tagfilter is a control who's task is to install a response filter that will
            add a configurable list of controls to any page that uses it.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.DoInit(System.EventArgs)">
            <summary>
            Call this to fire the init event
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.CheckInstalled(System.Web.UI.Control)">
            <summary>
            Returns true if there is already an instance of this filter in the
            Controls collection of ToCheck
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.CreateChildControls">
            <summary>
            CreateChildControls is fired on the Init event, and creates the
            custom Response Filter for the page.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Override of base Render method. Renders the child controls contained in
            the filters to the HTML property of each filter, but doesn't render to the
            output.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.AddFilter(CSAAWeb.Filter.FilterTags)">
            <summary>
            Adds the Filter, initializes the controls in the filter, and adds them
            to the child controls.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.DoFilter(CSAAWeb.Filter.FilterBuffer)">
            <summary>
            This is the actual Response filter.
            </summary>
            <param name="b"></param>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.InComment(CSAAWeb.Filter.FilterBuffer,System.Int32,System.Int32)">
            <summary>
            Returns true if position in b at i starts a comment that isn't completed
            by the close carot at j.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.HandleTag(CSAAWeb.Filter.FilterBuffer,System.Int32,System.Int32,System.String,System.Collections.ArrayList)">
            <summary>
            Checks the located tag for a match, and does the required operation if found.
            Returns the next position to check.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.CloseTag(CSAAWeb.Filter.FilterBuffer,System.Int32,CSAAWeb.Filter.FilterTags)">
            <summary>
            Handles the filters for closing html tags
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.TagFilter.OpenTag(CSAAWeb.Filter.FilterBuffer,System.Int32,System.Int32,System.String,CSAAWeb.Filter.FilterTags)">
            <summary>
            Handles the filters for opening html tags
            </summary>
        </member>
        <member name="T:CSAAWeb.Filter.FilterList">
            <summary>
            FilterList class is used to capture the base filtering information.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterList.AddFilter(System.String,System.String)">
            <summary>
            Adds a filter to the unrendered chain of filters.
            </summary>
            <param name="key"></param>
            <param name="source"></param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterList.CheckFile(System.String)">
            <summary>
            Checks to see if the filter definition is a control file, and if so, checks to
            see if it actually exists.
            </summary>
            <param name="VPath"></param>
            <returns></returns>
        </member>
        <member name="P:CSAAWeb.Filter.FilterList.SiteRoot">
            <summary>
            Property representing the virtual root of the application.
            </summary>
        </member>
        <member name="T:CSAAWeb.Filter.FilterTags">
            <summary>
            FilterTags encapsulates all the filters for a giving begin or end tag.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.#ctor">
            <summary>
            Default constructor for cloning.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.#ctor(CSAAWeb.Filter.FilterTag)">
            <summary>
            Primary constructor, for tag with at least one filter.
            </summary>
            <param name="Filter">The filter to add.</param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.Add(System.Object)">
            <summary>
            Generic object add for cloning.
            </summary>
            <param name="Filter">The filter to add</param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.Add(CSAAWeb.Filter.FilterTag)">
            <summary>
            Adds the Filter to the filters for this tag.
            </summary>
            <param name="Filter">The filter to add</param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.CheckSources">
            <summary>
            For filters that generate a control from a source file, this checks to
            see if the files exists first.  This checks all the filters for the tag
            </summary>
            <returns>True if there is at least one filter for the tag with a valid source</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.Clone">
            <summary>
            ICloneable interface
            </summary>
            <returns>Clone of object</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.Clone(System.Web.UI.TemplateControl)">
            <summary>
            ICloneable.Clone.
            </summary>
            <param name="_Control">The control to clone.</param>
            <returns>A clone of control.</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.Init(System.Web.UI.TemplateControl)">
            <summary>
            Initializes the properties and returns this.
            </summary>
            <param name="_Control">The control to initialize this with.</param>
            <returns>this</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTags.CheckMatch(System.Web.UI.Control)">
            <summary>
            True if Owner is same type as Content and if so, clears content.
            </summary>
            <param name="Owner"></param>
            <returns></returns>
        </member>
        <member name="P:CSAAWeb.Filter.FilterTags.Empty">
            <summary>
            True if there are no filters here.
            </summary>
        </member>
        <member name="T:CSAAWeb.Filter.FilterTag">
            <summary>
            FilterTag encapsulates all the information needed to filter a specific tag,
            in one specific way (before, after, replace, attribute)
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTag.#ctor">
            <summary>
            Default constructor for cloning.
            </summary>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTag.#ctor(System.String,System.String)">
            <summary>
            Primary constructor to create from configuration.
            </summary>
            <param name="key"></param>
            <param name="source"></param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTag.ExtractInfo(System.String)">
            <summary>
            Extracts properties from the configuration file key name.
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTag.Render">
            <summary>
            Sets the HTML property by rendering the contained Control.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTag.Clone">
            <summary>
            ICloneable interface
            </summary>
            <returns>Clone of object</returns>
        </member>
        <member name="M:CSAAWeb.Filter.FilterTag.Substitute(System.String@)">
            <summary>
            Performs an attribute substitution on tag.
            </summary>
        </member>
        <member name="T:CSAAWeb.Navigation.ACLEntry">
            <summary>
            Class for an Acess Control List Entry.
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.SimpleSerializer">
            <summary>
            SimpleSerializer is a base class for messaging classes that are used to transport
            data between application tiers.  It provides three primary capabilities:
            1) Ability to serialize into and deserialize from XML strings.  2) Ability to
            Copy from and to other unrelated types that have properties or fields with matching
            names. 3) Ability to copy from a dataset with matching field names and to
            stored procedure command objects with matching parameter names.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.#ctor(System.Object)">
            <summary>
            Constructs SimpleSerializer with properties/fields from O.
            </summary>
            <param name="O">Object to copy properties/fields from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.#ctor(System.String)">
            <summary>
            Constructs SimpleSerializer from an XML string.
            </summary>
            <param name="Xml">The XML string.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.LoadXML(System.String)">
            <summary>Loads properties from an XML string.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.IsMissing(System.String)">
            <summary>Returns true if s is blank or null.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.junkValidation(System.String)">
            <summary>Security Defect - Returns true if input string contains junk characters.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.ToString">
            <summary>Serializes the object into an XML string</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.CopyFrom(System.Object)">
            <summary>
            Copies the values of properties/fields of O into the matching fields in this.
            </summary>
            <param name="O">Object to copy properties/fields from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.CopyFrom(System.Data.IDataReader)">
            <summary>
            Copies the values of properties of Reader into the matching fields in this.
            Loops on this.
            </summary>
            <param name="Reader">DataReader to copy fields from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.CopyTo(System.Object)">
            <summary>
            Copies the values of fields of this into the matching properties of O.
            Loops on this.
            </summary>
            <param name="O">Object to copy properties/fields to.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.SimpleSerializer.CopyTo(System.Data.IDbCommand)">
            <summary>
            Copies the values of fields to the matching parameters of a db command
            object representing a stored procedure with named parameters.
            </summary>
            <param name="Cmd">The database command object who's parameters will be set.</param>
        </member>
        <member name="P:CSAAWeb.Serializers.SimpleSerializer.DeclaredOnly">
            <summary>
            Derived classes can override this to allow copying inherited fields and properties.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACLEntry.#ctor">
            <summary>Default contstructor</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACLEntry.#ctor(System.String)">
            <summary>Xml contstructor</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACLEntry.#ctor(System.Object)">
            <summary>Copy object contstructor</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.ACList">
            <summary>The Access Control List</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.Menu_ID">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.URL">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.Enabled">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.isDir">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.Parent_ID">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Navigation.ACLEntry.Sort_Order">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Navigation.ACLEntry.Matches(System.String)">
            <returns>True if a match.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ACLEntry.IsAuthorized(System.Collections.ArrayList)">
            <summary>
            Returns true if one of the items roles is contained in UserRoles.
            </summary>
            <param name="UserRoles">The roles to check.</param>
            <returns>True if authorized.</returns>
        </member>
        <member name="P:CSAAWeb.Navigation.ACLEntry.ACL">
            <summary/>
        </member>
        <member name="T:CSAAWeb.Navigation.ArrayOfACLEntry">
            <summary>
            Class for the Access Control List; Array of entries.
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ArrayOfSimpleSerializer">
            <summary>
            Base class for collection of message objects.  Provides these fundamental capabilities:
            1) Ability to serialize into and deserialize from XML strings.  2) Ability to
            Copy from and to other unrelated collections with elements that have properties or fields with matching
            names to the Message class contained herein. 3) Ability to copy from a dataset
            with rows that have matching fields.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.#ctor(System.String)">
            <summary>
            Constructor that accepts an xml string.
            </summary>
            <param name="Xml">The XML string.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.#ctor(System.Collections.IList)">
            <summary>
            Constructor that accects another list.  Copies items from that list.
            </summary>
            <param name="source">The collection to copy items from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.LoadXML(System.String)">
            <summary>Loads properties from an XML string.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.IsMissing(System.String)">
            <summary>Returns true if s is blank or null.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.ToString">
            <summary>Serializes the object into an XML string</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Add(System.Object)">
            <summary>Adds item to the collection.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Add(CSAAWeb.Serializers.SimpleSerializer)">
            <summary>
            Adds item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.CopyFrom(System.Data.IDataReader)">
            <summary>
            Fills collection with records from reader.
            </summary>
            <param name="Reader">The dataset to copy items from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.CopyFrom(System.Data.DataTable)">
            <summary>
            Fills collection with records from Table.
            </summary>
            <param name="Table">The dataset to copy items from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.CopyFrom(System.Collections.IList)">
            <summary>
            Fills collection with records from source.
            </summary>
            <param name="source">The collection to copy items from.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Sort(System.String)">
            <summary>Sorts this list on the selected field.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.GetKeys(System.String)">
            <summary>Returns an array of keys for this using Field as the key.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Reverse">
            <summary>Reverses the order of the elements.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Append(CSAAWeb.Serializers.ArrayOfSimpleSerializer)">
            <summary>Appends the elements of Source.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfSimpleSerializer.DeclaredOnly">
            <summary>
            Derived classes can override this to allow copying inherited fields and properties.
            </summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Item(System.Int32)">
            <summary>
            Gets or sets the item at index.
            </summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfSimpleSerializer.Data">
            <summary>
            Returns a DataTable representation of this collection.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.#ctor(System.String)">
            <summary>Xml constructor</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.#ctor(System.Collections.IList)">
            <summary>Copy object constructor</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>Constructor gets data from database</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.Add(CSAAWeb.Navigation.ACLEntry)">
            <summary>
            Adds item to the list.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.CheckAccess(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Returns true if User is not disallowed access to Url.
            </summary>
            <param name="Url">Url to check.</param>
            <param name="User">The user to check access for.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.CheckAccess(System.String,System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Returns true if User is not disallowed access to Url.
            </summary>
            <param name="Url">Url to check.</param>
            <param name="Ticket">The user ticket to check access for.</param>
            <returns>True if allowed.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.CheckAccess(System.String,System.String,System.Collections.ArrayList)">
            <returns>True if allowed.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ArrayOfACLEntry.GetUserID(System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Returns the UserID of User or "" if none.
            </summary>
        </member>
        <member name="P:CSAAWeb.Navigation.ArrayOfACLEntry.Item(System.Int32)">
            <summary>
            Default property.
            </summary>
        </member>
        <member name="T:CSAAWeb.Navigation.ACL">
            <summary>
            Class for a control to put on pages that controls access to the page based
            upon the user's roles and the roles associated with the page or folder in
            the menu system.  ACL information is contained in a static variable, that is
            initialized at the first instance.  Contains a filesystem watcher that looks
            for a semaphore created by changes in navigation to refresh this cache.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.#cctor">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.OnInit(System.EventArgs)">
            <summary>Sets the static time and ACL properties.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.GetACL">
            <summary>
            Reads the ACL information from the database.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.Semaphore(System.String)">
            <summary>
            Builds a semaphore file name based on path.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.InitWatcher(System.String)">
            <summary>
            Creates the watcher and starts it to watching for creation of
            the notification semaphore.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Notifies control that ACL has changed and internal copy needs to 
            be refreshed.
            </summary>
        </member>
        <member name="F:CSAAWeb.Navigation.ACL.ServicePath">
            <summary>Set to the path for the navigation service.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.ACL.Auto">
            <summary>Set to false to prevent the control from automatically checking the current Url.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.ACL.LoginUrl">
            <summary>Url to redirect if not authorized.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.ResetNav">
            <summary>Calls the navigation component and resets it.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.GetStartUrl(System.String)">
            <summary>
            Returns the start page for the list of roles.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.StartUrl(System.String)">
            <summary>
            Returns the start page for the list of roles.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.OnInit(System.String)">
            <summary>
            Checks and initializes if necessary static items.
            </summary>
            <param name="ApplicationPath"></param>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.Notify(System.String)">
            <summary>
            Creates a notification semaphore in the root of the application for
            site, which will force reloading of the URL_ACL on that site.
            </summary>
            <param name="path">Root path of site to notify.</param>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.CheckAccess(System.String,System.Security.Principal.IPrincipal)">
            <summary>
            Checks user's access for Url.
            </summary>
            <param name="Url">The Url to check.</param>
            <param name="User">The User to check</param>
            <returns>True if access not denied.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.CheckAccess(System.String,System.Web.Security.FormsAuthenticationTicket)">
            <summary>
            Checks user's access for Url.
            </summary>
            <param name="Url">The Url to check.</param>
            <param name="Ticket">The User authentication ticket to check</param>
            <returns>True if access not denied.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.CheckAccess(System.String,System.String)">
            <summary>
            Checks user's access for Url.
            </summary>
            <param name="Url">The Url to check.</param>
            <param name="EncryptedTicket">The Encrypted user ticket to check.</param>
            <returns>True if access not denied.</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.ACL.CheckAccess(System.String,System.String,System.Collections.ArrayList)">
            <summary>
            Checks user's access for Url.
            </summary>
            <param name="Url">The Url to check.</param>
            <param name="UserID">The User to check</param>
            <param name="UserRoles">The list of user's roles.</param>
            <returns>True if access not denied.</returns>
        </member>
        <member name="P:CSAAWeb.Navigation.ACL.UnauthorizedUrl">
            <summary>Url to redirect if not authorized.</summary>
        </member>
        <member name="P:CSAAWeb.Navigation.ACL.List">
            <summary>
            Returns the ACL.  Throws an exception if it is undefined, and no
            database connection string defined.
            </summary>
        </member>
        <member name="T:CSAAWeb.Navigation.AccessInfo">
            <summary>
            Class for passing auth and access information back to consuming app.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.AccessInfo.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.AccessInfo.#ctor(System.String,System.String)">
            <summary>Constructor from encrypted ticket.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.AccessInfo.Authenticated">
            <summary>True if the ticket is valid.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.AccessInfo.Authorized">
            <summary>True if the user is authorized to the page.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.AccessInfo.Message">
            <summary>Any (error) message returned.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.AccessInfo.UserID">
            <summary>The ticket's userid.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.AccessInfo.UserRoles">
            <summary>The ticket's user's roles.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.AccessInfo.RedirectUrl">
            <summary>Url to redirect to if not authorized.</summary>
        </member>
        <member name="T:CSAAWeb.Navigation.NavigationClient">
            <summary>
            Class for accessing initialization data through the web service.
            </summary>
        </member>
        <member name="T:CSAAWeb.Web.SoapHttpClientProtocol">
            <summary>
            Base class for Soap clients that has improved exception handling and
            more automatic method invokation.  Will also try to make call locally if
            possible rather than through web service if the service is located in the
            same directory and assembly.
            </summary>
            <remarks>
            <para>Action is determined by several entries in appSettings config section.</para>
            <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
                &lt;appSettings&gt;
                    &lt;!--This is the default credential used for all webservice based on this type--&gt;
                    &lt;add key="WebService.Credentials" value="userid,password"/&gt;
                    &lt;!--If true, the default credential is encrypted using Constants.CS_STRING--&gt;
                    &lt;add key="WebService.EncryptedCredentials" value="false"/&gt;
                    &lt;!--The default setting for whether internal web service invoke should be logged.--&gt;
                    &lt;add key="WebService.LogInternalInvoke" value="false"/&gt;
                    &lt;!--The Url for a specific web service--&gt;
                    &lt;add key="WebService.[Type name]" value="http://WebserviceUrl"/&gt;
                    &lt;!--The credential for a specific web service.--&gt;
                    &lt;add key="WebService.[Type name].Credentials" value="userid,password"/&gt;
                    &lt;!--True if the credential for the service is encrypted using Constants.CS_STRING--&gt;
                    &lt;add key="WebService.[Type name].EncryptedCredentials" value="false"/&gt;
                    &lt;!--True if internal invoke calls should be logged.--&gt;
                    &lt;add key="WebService.[Type name].LogInternalInvoke" value="false"/&gt;
                &lt;/appSettings&gt;
            &lt;/configuration&gt;
            </code>
            
            </remarks>
        </member>
        <member name="T:CSAAWeb.Web.IClosableWeb">
            <summary>
            Interface to use for web pages that want to have resources cleaned up
            automatically on completion.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.IClosableWeb.Close">
            <summary>
            Method called to close resources.  Typically used to close database
            connections.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.#cctor">
            <summary>
            Static constructor get the default credential information.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.GetUrlInfo(System.Type)">
            <summary>
            Looks for the class in web.config and creates an entry in UrlCache for it.
            </summary>
            <param name="T"></param>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.GetCredential(System.String)">
            <summary>
            Looks for the class credential information in web.config and creates the credential
            if found.  Returns the created credential.  If not found, and a default exists,
            returns the default instead.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.#ctor">
            <summary>
            Constructor gets the Service name and credentials from the config file.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Close">
            <summary>Closes any open connections.</summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Invoke">
            <summary>
            Calls Invoke.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Invoke(System.Object[])">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="Parameters">Parameters to pass to service.</param>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Invoke(System.String,System.Object[])">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="MethodName">Method to invoke.</param>
            <param name="Parameters">Parameters to pass to service.</param>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Invoke(System.Object[],System.Boolean)">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="Parameters">Parameters to pass to service.</param>
            <param name="SkipLog">True if internal logging should be omitted.</param>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Invoke(System.String,System.Object[],System.Boolean)">
            <summary>
            Invokes the web service method.
            </summary>
            <param name="MethodName">Method to invoke.</param>
            <param name="Parameters">Parameters to pass to service.</param>
            <param name="SkipLog">True if internal logging should be omitted.</param>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.InternalInvoke(System.String,System.Object[],System.Boolean)">
            <summary>
            Invokes the method through a direct instantiation of the WebService object
            then calling the method through reflection.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.HandleSoapException(System.Web.Services.Protocols.SoapException)">
            <summary>
            Extracts the original exception from a soap call, so that the calling code
            does not see the exception as a soap exception.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Caller">
            <summary>
            Gets the name of the calling method.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SoapHttpClientProtocol.Log(System.Reflection.MethodInfo,System.Object[],System.Boolean)">
            <summary>
            This method logs web service method calls that have been called through
            internal invoke rather than Url calls.
            </summary>
            <param name="M">MethodInfo object for the method being called</param>
            <param name="Parameters">The actual parameters being passed.</param>
            <param name="Success">True if the call succeeded, false if failed.</param>
        </member>
        <member name="P:CSAAWeb.Web.SoapHttpClientProtocol.ServiceClass">
            <summary>
            The AssemblyQualifiedName of the underlying web service.  Used to attempt to 
            instantiate the service directly if no Url is provided.  This is generated
            automatically, but can be overridden in derived classes if a different formulation
            is required.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.NavigationClient.#ctor(System.String)">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Navigation.NavigationClient.ACL">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Navigation.NavigationClient.UnauthorizedUrl">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Navigation.NavigationClient.StartUrl(System.String)">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Navigation.NavigationClient.Reset">
            <summary/>
        </member>
        <member name="T:CSAAWeb.Navigation.MenuData">
            <summary>
            Outputs dynamically generated Javascript for to supply to the menu system.
            Uses HTTP headers to allow smart browser caching.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.#cctor">
            <summary></summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.#ctor">
            <summary></summary>
        </member>
        <member name="F:CSAAWeb.Navigation.MenuData.oConn">
            <summary>The database connection object.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.MenuData.ConnectionString">
            <summary>Database connection string.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.MenuData.UserRoles">
            <summary>Comma separated list of user's roles</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.MenuData.HasContent">
            <summary>
            This is set to true if the if-none-match tag doesn't match computed
            value in OnLoad, and if so, Render will actually render content.
            </summary>
        </member>
        <member name="F:CSAAWeb.Navigation.MenuData.Sites">
            <summary>List of sites requiring notification that navigation content has changed.</summary>
        </member>
        <member name="F:CSAAWeb.Navigation.MenuData.MenuTime">
            <summary>The time of last navigation content change.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.OnInit(System.EventArgs)">
            <summary>Sets the static time.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.Close">
            <summary>Closes and kills the database connection if its open.</summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.Reset">
            <summary>
            Resets the menutime and notifies all sites using acl.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.OnLoad(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Write the content if needed.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.SetHeaders">
            <summary>
            Sets the response headers that control the browser caching.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.CheckSite(System.String)">
            <summary>
            Checks to see Uri is in the Sites list and adds it if not.
            </summary>
            <param name="Uri">Uri to add to list.</param>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.OpenConnection">
            <summary>
            Creates and opens the database connection if necessary.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.GetUserRoles">
            <summary>
            Reads the user roles from the cookie and reformats them for use by
            navigation.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.GetUserRoles(System.Security.Principal.IPrincipal)">
            <summary>
            Reads the user roles from the cookie and reformats them for use by
            navigation.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.GetUserRoles(System.String)">
            <summary>
            Reads the user roles from the cookie and reformats them for use by
            navigation.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.getMenus(System.Boolean)">
            <summary>
            Gets the menu information from the database for the current user and roles
            </summary>
            <param name="forAdmin">True if this list is for menu admin purposes</param>
            <returns>Javascript string</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.CommonMenuGenerate">
            <summary>
            Gets the menu information from the database for the current user and roles
            </summary>
            <returns>Javascript string</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.createMenuData(System.Boolean)">
            <summary>
            Reads the database to get the menu information for the current user plus
            the menu properties.
            </summary>
            <param name="forAdmin">True if this list is for menu admin purposes</param>
            <returns>Javascript string</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.getMenuProperties">
            <summary>
            Gets the menu properties from the database.
            </summary>
            <returns>Javascript string</returns>
        </member>
        <member name="M:CSAAWeb.Navigation.MenuData.BrowserVer">
            <summary>
            Returns the current browser version.
            </summary>
        </member>
        <member name="P:CSAAWeb.Navigation.MenuData.ETAG">
            <summary>
            This string is used for browse cache control.
            </summary>
        </member>
        <member name="T:CSAAWeb.Navigation.Service">
            <summary>
            This service provides remote access to navigation information.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.#ctor">
            <summary></summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.CheckAccess(System.String,System.String)">
            <summary>
            Returns information about the user's access to Url.
            </summary>
            <param name="Url">The Url to check for access.</param>
            <param name="EncryptedTicket">The ticket cookie (.ASPXAUTH)</param>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.CheckAccess(System.String,System.String,System.String)">
            <summary>
            Returns information about the user's access to Url.
            </summary>
            <param name="Url">The Url to check for access.</param>
            <param name="UserID">The User to check.</param>
            <param name="UserRoles">Comma separated list of user roles</param>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.Reset">
            <summary>
            Resets the navigation system.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.ACL">
            <summary>
            Returns the URL Access Control List.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.UnauthorizedUrl">
            <summary>
            Returns the URL for redirection on an unauthorized page request.
            </summary>
        </member>
        <member name="M:CSAAWeb.Navigation.Service.StartUrl(System.String)">
            <summary>
            Returns the starting Url for a list of roles.
            </summary>
        </member>
        <member name="T:CSAAWeb.Queue">
            <summary>
            Queue starts a single additional thread to allow web applications to complete
            lengthy processes outside of normal page processing, and also to allow sequential
            access of fixed resources (such as log files) by multiple threads without holding 
            up the main processing thread of the request.  The Application logging facility
            provided within CSAAWeb utilizes this queue, and must be used if use of queue is
            desired.  Applications can make other uses of Queue by implementing IQueued or
            inheriting from QueueItem then placing these objects on the queue by calling
            the static method Queue.Enqueue.
            </summary>
            <remarks>
            <seealso cref="T:CSAAWeb.IQueued"/>
            <see cref="T:CSAAWeb.Web.LogModule"/>
            <seealso cref="T:CSAAWeb.QueueItem"/>
            </remarks>
        </member>
        <member name="F:CSAAWeb.Queue.SleepTime">
            <summary>Modify this to change the sleep time.</summary>
        </member>
        <member name="M:CSAAWeb.Queue.#ctor">
            <summary>
            Default constructor initializes worker thread and Queue.
            </summary>
        </member>
        <member name="M:CSAAWeb.Queue.Finalize">
            <summary>Finalizer aborts worker thread.</summary>
        </member>
        <member name="M:CSAAWeb.Queue.Enqueue(CSAAWeb.IQueued)">
            <summary>Places item onto the queue</summary>
        </member>
        <member name="M:CSAAWeb.Queue.StopAll">
            <summary>Stops and clears all the Queues</summary>
        </member>
        <member name="M:CSAAWeb.Queue.Stop">
            <summary>Aborts worker thread and clears the Queue</summary>
        </member>
        <member name="M:CSAAWeb.Queue.Enq(CSAAWeb.IQueued)">
            <summary>Places item onto the queue</summary>
        </member>
        <member name="M:CSAAWeb.Queue.ThreadMain">
            <summary>Thread delegate for replication.</summary>
        </member>
        <member name="T:CSAAWeb.QueuedResult">
            <summary>Enum for results of IQueued.Run</summary>
        </member>
        <member name="F:CSAAWeb.QueuedResult.Waiting">
            <summary>The item is waiting to run.</summary>
        </member>
        <member name="F:CSAAWeb.QueuedResult.Complete">
            <summary>Completed successfully</summary>
        </member>
        <member name="F:CSAAWeb.QueuedResult.Failed">
            <summary>Completed with failures.</summary>
        </member>
        <member name="F:CSAAWeb.QueuedResult.Retry">
            <summary>Requeue the item.</summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ParameterCollectionCache">
            <summary>
            Strongly typed collection for Parameters collection based on the Sql statement
            as a key. Provides methods to retrieve parameter collections, and caches
            them for repeat use.
            </summary>
            <remarks>
            To extend this class to handle more DbData types beyond SqlClient and OleDbClient,
            add appropriate lines to the Add method for the new type.
            </remarks>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.GetParameters(System.Data.IDbCommand)">
            <summary>
            Retrieves the parameters collection from the cache.
            </summary>
            <param name="Cmd">The command to get parameters for.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.SetValue(System.Data.IDataParameterCollection,System.String,System.Object)">
            <summary>
            Sets a parameter value in Parameters C to Value, and if the parameter type is
            a string, and the parameter length is greater than the length
            of the value, sets the parameter length to the length of the 
            value.  This is because Text parameter length is always the max
            length which causes an excess memory consumption.
            </summary>
            <param name="C">The parameter collection</param>
            <param name="Name">The parameter to set.</param>
            <param name="Value">The value to set it to.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.IsTextField(System.Data.IDataParameter)">
            <summary>
            Returns true if the parameter is a text or long string.
            </summary>
            <param name="P">Parameter to check</param>
            <returns>Boolean true if long string</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.IsTextField(System.Data.SqlDbType)">
            <summary>
            Returns true if the parameter is a text or long string.
            </summary>
            <param name="T">Parameter type to check</param>
            <returns>Boolean true if long string</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.IsTextField(System.Data.OleDb.OleDbType)">
            <summary>
            Returns true if the parameter is a text or long string.
            </summary>
            <param name="T">Parameter type to check</param>
            <returns>Boolean true if long string</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.Contains(System.Data.IDbCommand)">
            <summary>
            Returns true if the Sql for Cmd is in the collection.
            </summary>
            <param name="Cmd">The command to look for.</param>
            <returns>True if its here.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterCollectionCache.Add(System.Data.IDbCommand)">
            <summary>
            Calls the appropriate CommandBuilder.DeriveParameters method
            for Cmd, and adds its parameters to the collection. 
            Throws an exception if Cmd isn't from SqlClient or OleDb.
            </summary>
            <param name="Cmd">Command to get parameters of.</param>
        </member>
        <member name="P:CSAAWeb.Serializers.ParameterCollectionCache.Item(System.Data.IDbCommand)">
            <summary>
            Gets the parameter collection for Cmd if it is cached
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ParameterDef">
            <summary>
            Generic parameter class used for caching parameters
            </summary>
            <remarks>
            Note: to extend this class to handle parameters other than SqlParameter and
            OleDbParameter, add a property of the correct name just like SqlDbType.  This
            assumes that the new parameter type has a 10-value constructor in the same form
            as SqlParameter, if not there will be more coding.
            </remarks>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterDef.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterDef.#ctor(System.String)">
            <summary>Xml constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterDef.#ctor(System.Object)">
            <summary>Object constructor</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.ParameterConstructor">
            <summary>The constructor for the original parameter type</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.ParameterName">
            <summary>The Type of the original parameter</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.BaseDbType">
            <summary>DataType of the parameter</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.Size">
            <summary>Size of the parameter</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.Direction">
            <summary>Direction of the parameter</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.IsNullable">
            <summary>True if the parameter can contain null values</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.Precision">
            <summary>Precision of the parameter</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.Scale">
            <summary>Scale of the value of the parameter</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.SourceColumn">
            <summary>The source column</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.SourceVersion">
            <summary>Source version</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ParameterDef.Value">
            <summary>The value.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ParameterDef.Clone">
            <summary>
            Returns a real parameter of the correct Db type based on the values of this.
            </summary>
            <returns>IDataParameter of appropriate type</returns>
        </member>
        <member name="P:CSAAWeb.Serializers.ParameterDef.SqlDbType">
            <summary>SqlDataType of the parameter</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ParameterDef.OleDbType">
            <summary>OleDbDataType of the parameter</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ParameterDef.Detail">
            <summary>
            An array of objects suitable for passing to a parameter constructor.
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ArrayOfParameterDef">
            <summary>
            Array of generic parameters used to cache parameters of various types.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfParameterDef.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfParameterDef.#ctor(System.Data.IDataParameterCollection)">
            <summary>Constructor accepts IDataParameterCollection</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfParameterDef.CopyFrom(System.Data.IDataParameterCollection)">
            <summary>
            Copies records from a parameter collection.
            </summary>
            <param name="Source">The parameter collection</param>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfParameterDef.CopyTo(System.Data.IDbCommand)">
            <summary>
            Adds the parameters in collection to Cmd.Parameter.
            </summary>
            <param name="Cmd"></param>
        </member>
        <member name="T:CSAAWeb.Serializers.Serializer">
            <summary>
            Contains class methods for serializing and deserializing.  Used by serializable
            classes defined in this module.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.ToXML(System.Object)">
            <summary>
            Converts o to an XML string, getting public properties and fields.
            </summary>
            <param name="o">The object to convert.</param>
            <returns>XML string.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.FromXML(System.Type,System.String)">
            <summary>
            Returns a new instance of the object from an XML string
            </summary>
            <param name="T">The type to create.</param>
            <param name="xml">XML string to convert from</param>
            <returns>Object of type T filled with values from xml.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.FromXML(System.String)">
            <summary>
            Method attempts to determine the type of the caller and creates an
            object of that type, then fills it with values from xml.
            </summary>
            <param name="xml">XML string of object's values.</param>
            <returns>Object of caller's type with values from xml.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.IsMissing(System.String)">
            <summary>
            Convenience function, checks for missing values (blanks or null)
            </summary>
            <param name="s">The string to check.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Object,System.Object)">
            <summary>
            Copies the values of properties and fields of source into the matching fields or properties in dest.
            Loop on members of dest, return dest.
            </summary>
            <param name="source">Object to copy from.</param>
            <param name="dest">Object to copy to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Object,System.Object,System.Boolean)">
            <summary>
            Copies the values of properties and fields of source into the matching fields or properties in dest.
            Loop on members of dest, return dest.
            </summary>
            <param name="source">Object to copy from.</param>
            <param name="dest">Object to copy to.</param>
            <param name="DeclaredOnly">If true only copies properties that are declared. If true
            also copies properties that are inherited.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Data.IDataReader,System.Object)">
            <summary>
            Copies the values of Reader to the matching fields or properties of dest.
            Loop on Reader, return dest.
            </summary>
            <param name="Reader">Dataset to copy values from.  Dataset should be open to
            a specific record.</param>
            <param name="dest">Object to copy values to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Data.DataRow,System.Object)">
            <summary>
            Copies the values of Row to the matching fields or properties of dest.
            Loop on Row, return dest.
            </summary>
            <param name="Row">DataRow to copy values from.</param>
            <param name="dest">Object to copy values to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Collections.IList,System.Collections.IList)">
            <summary>
            Copies objects form the source list to the dest, creating
            new objects to put into dest of dest's underlying type.  Throws
            an exception if dest is not a strongly typed collection.
            </summary>
            <param name="source">Collection to copy items from.</param>
            <param name="dest">Collection to copy items to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Collections.IList,System.Collections.IList,System.Boolean)">
            <summary>
            Copies objects form the source list to the dest, creating
            new objects to put into dest of dest's underlying type.  Throws
            an exception if dest is not a strongly typed collection.
            </summary>
            <param name="source">Collection to copy items from.</param>
            <param name="dest">Collection to copy items to.</param>
            <param name="DeclaredOnly">If true only copies properties that are declared. If true
            also copies properties that are inherited.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Data.IDataReader,System.Collections.IList)">
            <summary>
            Copies records from the reader to newly created members of the list
            dest and returns dest.  Throws an exception if dest is not a strongly
            typed collection.
            </summary>
            <param name="Reader">Dataset to copy records from.</param>
            <param name="dest">Collection to copy items to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Data.DataTable,System.Collections.IList)">
            <summary>
            Copies records from the Table to newly created members of the list
            dest and returns dest.  Throws an exception if dest is not a strongly
            typed collection.
            </summary>
            <param name="Table">Dataset to copy records from.</param>
            <param name="dest">Collection to copy items to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.Construct(System.Type)">
            <summary>
            Invokes the default constructor of type T and returns an object of
            that type.
            </summary>
            <param name="T">Type to invoice constructor of.</param>
            <returns>Object of type T.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyTo(System.Object,System.Object)">
            <summary>
            Copies the values of properties and fields of source into the matching fields or properties in dest.
            Loop on members of source, return dest.
            </summary>
            <param name="source">Object to copy from.</param>
            <param name="dest">Object to copy to.</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyTo(System.Object,System.Object,System.Boolean)">
            <summary>
            Copies the values of properties and fields of source into the matching fields or properties in dest.
            Loop on members of source, return dest.
            </summary>
            <param name="source">Object to copy from.</param>
            <param name="dest">Object to copy to.</param>
            <param name="DeclaredOnly">True if only declared members to be copied; false if inherited also</param>
            <returns>dest.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyTo(System.Object,System.Data.IDbCommand)">
            <summary>
            Copies the values of fields to the matching parameters of a db command
            object representing a stored procedure with named parameters.
            Loop on dest, return dest.
            </summary>
            <param name="source">Object to get parameter values from.</param>
            <param name="Cmd">Command to copy parameter values to.</param>
            <returns>The Command object.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyTo(System.Object,System.Data.IDbCommand,System.Boolean)">
            <summary>
            Copies the values of fields to the matching parameters of a db command
            object representing a stored procedure with named parameters.
            Loop on dest, return dest.
            </summary>
            <param name="source">Object to get parameter values from.</param>
            <param name="Cmd">Command to copy parameter values to.</param>
            <param name="DeclaredOnly">True if only declared members to be copied; false if inherited also</param>
            <returns>The Command object.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Collections.IList)">
            <summary>
            Returns a DataTable generated from source
            </summary>
            <param name="source">The collection to convert.</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CopyFrom(System.Collections.IList,System.Boolean)">
            <summary>
            Returns a DataTable generated from source
            </summary>
            <param name="source">The collection to convert.</param>
            <param name="DeclaredOnly">True if only declared members to be copied; false if inherited also</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.CacheParameters(System.Data.IDbCommand)">
            <summary>
            Gets the parameters for Cmd and puts them into the cache.  This
            allows for pre-caching of parameters before they are needed, such
            as if the command is to participate in a transaction.
            </summary>
            <param name="Cmd">The command to get parameters for.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.ToJsString(System.Data.IDataReader)">
            <summary>
            Returns a Javascript compatible string representation of Reader
            </summary>
            <param name="Reader">The recordset to convert.</param>
            <returns>Javascript string.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.ToJsString(System.Object[])">
            <summary>
            Returns a Javascript compatible string representation of O
            </summary>
            <param name="O">The array to convert.</param>
            <returns>Javascript string.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.ToJsString(System.Object)">
            <summary>
            Returns a Javascript compatible string representation of O
            </summary>
            <param name="O">The object to convert.</param>
            <returns>Javascript string.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.ArrayOfObjects(System.Data.DataTable,System.Type,System.Object,System.Boolean)">
            <summary>
            Helper method returns an array of Objects from O.
            </summary>
            <param name="Cols">Number of Columns to create.</param>
            <param name="T">The type to get values for.</param>
            <param name="O">The object to get the values from.</param>
            <param name="DeclaredOnly">True if only declared members to be copied; false if inherited also</param>
            <returns>Array with the values.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            Helper method returns the property or field type of M
            </summary>
            <param name="M">The member to get the type of.</param>
            <returns>The type of the member.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.GetListBaseType(System.Collections.IList)">
            <summary>
            Helper method attempts to determine the type of the default property of the IList and
            returns that Type.  Throws an exception if the type can't be determinied.
            </summary>
            <param name="C">The collection to check.</param>
            <returns>The type of the default property.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.GetListBaseType(System.Type)">
            <summary>
            Helper method attempts to determine the type of the default property of an IList type and
            returns that Type.  Throws an exception if the type can't be determinied.
            </summary>
            <param name="T">The type to check.</param>
            <returns>The type of the default property.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.GetOType(System.Object)">
            <summary>
            Helper method returns the type of O, unless O is a TemplateControl, in
            which case returns the underlying type of O.
            </summary>
            <param name="O">Object to get the type of.</param>
            <returns>Type of O.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.GetMember(System.Type,System.String)">
            <summary>
            Helper method returns a MemberInfo object from T called Name representing a
            field or a property if it exists.
            Throws an exception if there is more than one field or property member with this name.
            </summary>
            <param name="T">Type type to get the member from.</param>
            <param name="Name">The member name to get type of.</param>
            <returns>MemberInfo Object.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.IsPropertyOrField(System.Reflection.MemberInfo)">
            <summary>
            Helper method returns true if the M is a property or a field
            </summary>
            <param name="M">The member to check.</param>
            <returns>True if member is a property or field.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.IsRWPropertyOrField(System.Reflection.MemberInfo)">
            <summary>
            Helper method returns true if the M is a property or a field
            and if Property is both a read and write property.
            </summary>
            <param name="M">The member to check.</param>
            <returns>True if member is a property or field and if
            property, is both read and write.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.GetValue(System.Object,System.Reflection.MemberInfo)">
            <summary>
            Helper method gets the value from O represented by the property or field M.  Returns
            null if M isn't a property or field or M is null or is a write-only property.
            </summary>
            <param name="O">Object to get value from.</param>
            <param name="M">MemberInfo to get the value.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.SetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Helper Method sets the value of Property or Field M in O to V.  Throws
            an exception if M isn't a property or field.  Ignores M=null or M
            is a non-writable property.
            </summary>
            <param name="O">Object to set value of.</param>
            <param name="M">Member of object to set.</param>
            <param name="Value">Value to set.</param>
        </member>
        <member name="M:CSAAWeb.Serializers.Serializer.SimpleSetValue(System.Object,System.Reflection.MemberInfo,System.Object)">
            <summary>
            Helper Method sets the value of Property or Field M in O to V.  Throws
            an exception if M isn't a property or field.  Ignores M=null or M
            is a non-writable property.
            </summary>
            <param name="O">Object to set value of.</param>
            <param name="M">Member of object to set.</param>
            <param name="Value">Value to set.</param>
        </member>
        <member name="T:CSAAWeb.Serializers.CustomCopyAttribute">
            <summary>
            CustomCopyAttribute can be applied to any serializeable
            property or field and will determine how it is copied when
            there is not an exact type match.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.CustomCopyAttribute.#ctor">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Serializers.CustomCopyAttribute.Ignore">
            <summary>
            Ignore, when specified true will bypass the field if it can't be 
            copied.
            </summary>
        </member>
        <member name="F:CSAAWeb.Serializers.CustomCopyAttribute.DeepCopy">
            <summary>
            DeepCopy, when specified true will create a new object of
            the required type and copy that object.
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.IValidatingSerializer">
            <summary>
            IValidatingSerializer is an interface that ValidatingSerializer and
            ArrayOfValidatingSerializer both inherit allowing them to validate properties
            of either type.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.IValidatingSerializer.Validate">
            <summary>
            Call this method to validate the object, which will populate its Errors
            property with any errors.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.IValidatingSerializer.Validate(CSAAWeb.Serializers.IValidatingSerializer,System.String)">
            <summary>
            Calls basic validation and bubbles errors up to V.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.IValidatingSerializer.AddError(CSAAWeb.Serializers.ErrorInfo)">
            <summary>
            If E is not null, first checks to see if Errors is null and initializes it,
            then adds e to the collection.
            </summary>
        </member>
        <member name="P:CSAAWeb.Serializers.IValidatingSerializer.Errors">
            <summary>
            This property will contain any errors after validation.  It will be null if
            there are no errors.  However, errors are always bubbled-up, that is they are
            removed from lower level properties, and placed in the highest level 
            IValidatingSerializer object that calls validate.
            </summary>
        </member>
        <member name="P:CSAAWeb.Serializers.IValidatingSerializer.SkipValidation">
            <summary>Set this property to true if validation is not required.</summary>
        </member>
        <member name="T:CSAAWeb.Serializers.IVS">
            <summary>
            Contains static methods used by the IValidatingSerializer interface classes.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.IVS.AddError(CSAAWeb.Serializers.IValidatingSerializer,CSAAWeb.Serializers.ErrorInfo)">
            <summary>
            If E is not null, first checks to see if Errors is null and initializes it,
            then adds e to the collection.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.IVS.Validate(CSAAWeb.Serializers.IValidatingSerializer,CSAAWeb.Serializers.IValidatingSerializer,System.String)">
            <summary>Calls basic Validator and bubbles errors up to V.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.IVS.Validate(CSAAWeb.Serializers.IValidatingSerializer,System.Reflection.MemberInfo,CSAAWeb.Serializers.ValidatingSerializerEventArgs)">
            <summary>Loops through the Validator attributes provided.</summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatingSerializer">
            <summary>
            Derived from SimpleSerializer, ValidatingSerializer contains an additional property,
            Errors, and method, Validate, that together allow for easy Validator by looping through
            its properties and calling Validate on any validateable properties.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.#ctor(System.String)">
            <summary>Xml constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.#ctor(System.Object)">
            <summary>Constructor from another Object</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.Validate">
            <summary>
            Recursively calls Validate on any IValidatingSerializer properties,
            and appends their Errors to this.  Should be overriden in derived classes
            to perform specific Validator on any other properties.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.Validate(System.Object,System.Reflection.MemberInfo)">
            <summary>
            If O is a validatingSerializer, calls its validate method with the property name,
            otherwise, checks for any ValidatorAttribute attributes and processes them.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.AddError(CSAAWeb.Serializers.ErrorInfo)">
            <summary>Adds E to errors collection if is not null, initializing Errors first.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializer.Validate(CSAAWeb.Serializers.IValidatingSerializer,System.String)">
            <summary>Calls basic Validator and bubbles errors up to V.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatingSerializer.SkipValidation">
            <summary>Set this property to true if validation is not required.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatingSerializer.Errors">
            <summary>
            After a call to Validate, contains any errors in this object that
            haven't been bubbled.
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ArrayOfValidatingSerializer">
            <summary>
            Derived from ArrayOfSimpleSerializer, this class implements the IValidatingSerializer interface.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.#ctor(System.String)">
            <summary>Xml constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.#ctor(System.Collections.IList)">
            <summary>Constructor from another collection</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.Add(CSAAWeb.Serializers.ValidatingSerializer)">
            <summary>Adds item to the collection.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.Validate">
            <summary>
            Recursively calls Validate on all the items in the list 
            and appends their Errors to this.  Should be overriden in derived classes
            to perform any specific Validator required for the list.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.AddError(CSAAWeb.Serializers.ErrorInfo)">
            <summary>Adds E to errors collection if is not null, initializing Errors first.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfValidatingSerializer.Validate(CSAAWeb.Serializers.IValidatingSerializer,System.String)">
            <summary>Calls basic Validator and bubbles errors up to V.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfValidatingSerializer.SkipValidation">
            <summary>Set this property to true if validation is not required.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfValidatingSerializer.Item(System.Int32)">
            <summary>
            Gets or sets the item at index.
            </summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfValidatingSerializer.Errors">
            <summary>
            After a call to Validate, contains any errors in this object that
            haven't been bubbled.
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorAttribute">
            <summary>
            This class of attributes can be applied to members of ValidatingSerializer to
            cause certain types of Validator to occur.
            </summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatorAttribute._Code">
            <summary>The error code to return</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorAttribute.CompareTo(System.Object)">
            <summary>Compares priority order.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorAttribute.OnValidate(CSAAWeb.Serializers.ValidatingSerializerEventArgs)">
            <summary>Validate event function.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorAttribute.Check(System.String)">
            <summary>Returns true if value is valid.  Overridden in derived classes.</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatorAttribute.Validation">
            <summary>The name of the custom validation function.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorAttribute.Message">
            <summary>The error message to return.</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorAttribute.Code">
            <summary>The error code to return</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorAttribute.Priority">
            <summary>The rank order of this validator.</summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorRequiredAttribute">
            <summary>Validator will insure that a value has been entered.</summary>
            //Security Defect - Ch1 -START - Modified the messages in the below valdiator messages
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorRequiredAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorRequiredAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorRequiredAttribute.Code">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorRequiredAttribute.Priority">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorNumericAttribute">
            <summary>Validator will insure that the value is numeric.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorNumericAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorNumericAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorNumericAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorMaxLengthAttribute">
            <summary>
            Validator will insure that the length isn't greater than the length property
            </summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatorMaxLengthAttribute.Length">
            <summary>The length to match against for ExactLength or MaxLength</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorMaxLengthAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorMaxLengthAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorMaxLengthAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorJunk">
            <summary>
            Security Defect -CH2- Start - Added the below Validator which will insure that the input string doesn't contain Junk characters
            </summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatorJunk.junkchars">
            <summary></summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorJunk.Check(System.String)">
            <summary>Method to check for the junk character in the input string</summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorJunk.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorJunk.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorExactLengthAttribute">
            <summary>Validator will insure that the length is exactly the length property</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatorExactLengthAttribute.Length">
            <summary>The length to match against for ExactLength or MaxLength</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorExactLengthAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorExactLengthAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorExactLengthAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorAlphaNumericAttribute">
            <summary>Validator will insure that the value contains only numbers and letters.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorAlphaNumericAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorAlphaNumericAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorAlphaNumericAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorDecimalAttribute">
            <summary>
            Validator will insure that the value is a valid number with a decimal.  May
            be negative.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorDecimalAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorDecimalAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorDecimalAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorDateAttribute">
            <summary>
            Validator will insure that the value is a valid date.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorDateAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorDateAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorDateAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorPhoneAttribute">
            <summary>
            Validator will insure that the value is a valid phone.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorPhoneAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorPhoneAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorPhoneAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatorEmailAttribute">
            <summary>
            Validator will insure that the value is a valid email.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatorEmailAttribute.Check(System.String)">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorEmailAttribute.Message">
            <summary></summary>
        </member>
        <member name="P:CSAAWeb.Serializers.ValidatorEmailAttribute.Code">
            <summary></summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatingSerializerEventHandler">
            <summary>
            Delegate definition for Validator.OnServerValidate Event
            </summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ValidatingSerializerEventArgs">
            <summary>
            EventArgs for Validator.OnServerValidate Event
            </summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatingSerializerEventArgs.Error">
            <summary>Set to an error if the case is invalid.</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatingSerializerEventArgs.Check">
            <summary>The object to check</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatingSerializerEventArgs.Value">
            <summary>A string representing the value of the object (useful if a simple type).</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatingSerializerEventArgs.Field">
            <summary>The field or property name.</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ValidatingSerializerEventArgs.Checking">
            <summary>The validator being checked.</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializerEventArgs.#ctor(CSAAWeb.Serializers.IValidatingSerializer)">
            <summary>Constructor accepting the Validator to check</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ValidatingSerializerEventArgs.#ctor(CSAAWeb.Serializers.IValidatingSerializer,System.Object,System.String)">
            <summary>Constructor accepting the property to check</summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ErrorInfo">
            <summary>
            Error object.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ErrorInfo.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ErrorInfo.#ctor(System.String)">
            <summary>Xml constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ErrorInfo.#ctor(System.Object)">
            <summary>Constructor from another Object</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ErrorInfo.#ctor(System.Object,System.String)">
            <summary>
            Constructor from another Object, with the property Name of that object to be prepended to
            Target.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ErrorInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Summary to construct with all the parameters.
            </summary>
            <param name="Code"></param>
            <param name="Message"></param>
            <param name="Target"></param>
        </member>
        <member name="M:CSAAWeb.Serializers.ErrorInfo.#ctor(CSAAWeb.Serializers.ValidatorAttribute,System.String)">
            <summary>
            Summary to construct from validaing attribute  the parameters.
            </summary>
            <param name="A"></param>
            <param name="Target"></param>
        </member>
        <member name="F:CSAAWeb.Serializers.ErrorInfo.Code">
            <summary>Error code</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ErrorInfo.Message">
            <summary>The error message</summary>
        </member>
        <member name="F:CSAAWeb.Serializers.ErrorInfo.Target">
            <summary>The target of the error</summary>
        </member>
        <member name="T:CSAAWeb.Serializers.ArrayOfErrorInfo">
            <summary>
            Collection of errors.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfErrorInfo.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfErrorInfo.#ctor(System.String)">
            <summary>Xml constructor</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfErrorInfo.#ctor(System.Collections.IList)">
            <summary>Constructor from another collection</summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfErrorInfo.Add(CSAAWeb.Serializers.ErrorInfo)">
            <summary>
            Adds item to the collection.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfErrorInfo.Append(CSAAWeb.Serializers.ArrayOfErrorInfo,System.String)">
            <summary>
            Appends the lines from source to this.
            </summary>
        </member>
        <member name="M:CSAAWeb.Serializers.ArrayOfErrorInfo.Bubble(CSAAWeb.Serializers.ArrayOfErrorInfo,System.String)">
            <summary>
            Bubbles this into E and returns E.  If E is null, will create a new
            array first.
            </summary>
            <param name="E">The error array to bubble into.</param>
            <param name="PropertyName">The name of the property that this belongs to.</param>
        </member>
        <member name="P:CSAAWeb.Serializers.ArrayOfErrorInfo.Item(System.Int32)">
            <summary>
            Gets or sets the item at index.
            </summary>
        </member>
        <member name="T:CSAAWeb.Validate">
            <summary>
            Summary description for Vaildators.
            </summary>
        </member>
        <member name="M:CSAAWeb.Validate.#cctor">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Validate.HasSpecialChar(System.String)">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidEmailAddress(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
            <example>
            '' valid email? False
            ' ' valid email? False
            'alan_laya@csaa.com' valid email? True
            'test.test@test.com' valid email? True
            'x@x' valid email? False
            'this is not a valid email' valid email? False
            'alan.laya@buzzsaw.com' valid email? True
            'x@x.org' valid email? True
            'x@x.tv' valid email? True
            'test test@ester.com' valid email? False
            'test^email@yahoo.com' valid email? False
            '1234test@yahoo.com' valid email? True
            'xxxxxx@@yahoo.com' valid email? False
            'xxxxxx@yahoo..com' valid email? False
            'xxxxxx@yahoo.com.' valid email? False 
            </example>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidCreditCard(System.String)">
            <summary>
            Returns true if the string contains a valid credit card number.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidAmexCard(System.String)">
            <summary>
            Returns true if the string contains a valid AMEX credit card number.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsAlphaNumeric(System.String)">
            <summary>
            Returns true is s contains an alphanumeric sequence.
            </summary>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidPhone(System.String)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsDatePassed(System.Int32,System.Int32)">
            <summary>
            Determines whether a given month/year combination is in the past
            </summary>
            <remarks>
            Since only month and year provided, calculates the days in month 
            to create a full date
            </remarks>
            <param name="mm"></param>
            <param name="yy"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsAllChars(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.isValidLastName(System.String)">
            <summary>
            Returns true if is a valid Last name
            </summary>
        </member>
        <member name="M:CSAAWeb.Validate.IsDecimal(System.String)">
            <summary>
            Returns true if s contains a valid decimal number.
            </summary>
        </member>
        <member name="M:CSAAWeb.Validate.IsAllNumeric(System.String)">
            <summary>
            Returns true if the value is entirely numeric.
            </summary>
            <param name="s">The string to check</param>
            <returns>True if its numeric</returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsAllNumeric(System.String,System.Boolean)">
            <summary>
            Does the string contain all numerics?
            </summary>
            <remarks>
            Performs strict checking for all numbers (i.e. not for valid numbers)
            -123 or 123.5 will return false!
            </remarks>
            <param name="s">The string to check.</param>
            <param name="OnBlank">The value to return if its blank.</param>
            <returns>True if numeric.</returns>
        </member>
        <member name="M:CSAAWeb.Validate.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            Supposed to return the time difference between two dates.
            Not yet implemented.
            </summary>
            <param name="dt1">Date 1</param>
            <param name="dt2">Date 2</param>
            <returns>Difference between Date 1 and Date 2</returns>
        </member>
        <member name="M:CSAAWeb.Validate.FormatPhone(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.FormatDate(System.String,System.String)">
            <summary>
            Reformats a date string to an specific format.
            </summary>
            <param name="datestring">The date string to reformat</param>
            <param name="formatspec">The format spec to use.</param>
            <returns>string</returns>
        </member>
        <member name="M:CSAAWeb.Validate.GetPhoneAreaCode(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.GetPhonePrefix(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.GetPhoneSuffix(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidZip(System.String)">
            <summary>
            
            </summary>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.HasHTMLChars(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidMemberIdLength(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.ToProperCase(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.Validate.IsValidDate(System.String)">
            <summary>
            
            </summary>
            <param name="datestring"></param>
            <returns></returns>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService.#ctor">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService.RecordApplicationEventAsync(CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest)">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService.RecordApplicationEventAsyncAsync(CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest)">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService.RecordApplicationEventAsyncAsync(CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncService.RecordApplicationEventAsyncCompleted">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.applicationContext">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.options">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.operations">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.filters">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.technicalCriteria">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.logLevel">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.requestorName">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.recordApplicationEventAsync_choice">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsyncRequest.recordApplicationEventAsyncRequestExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ApplicationContext">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.userId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.transactionType">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.application">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.subSystem">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.address">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.correlationId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationContext.applicationContextExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ExtensionArea">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ExtensionArea.Any">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ApplicationMessage">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.version">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.application">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.subsystem">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.module">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.userId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.address">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.correlationId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.errorCode">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.detailedMessage">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessage.applicationMessageExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ApplicationMessageExtension">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessageExtension.timestamp">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessageExtension.eventMessage">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ApplicationMessageExtension.applicationMessageExtensionExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ObjectProperty">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ObjectProperty.name">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ObjectProperty.value">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ObjectProperty.objectPropertyExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.CEFEvent">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.version">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.deviceVendor">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.deviceProduct">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.deviceVersion">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.signatureId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.name">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.severity">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.extension">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.CEFEvent.cEFEventExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.recordApplicationEventAsync_choice">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsync_choice.event">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.recordApplicationEventAsync_choice.message">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.RecordApplicationEventAsync_Operations">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.RecordApplicationEventAsync_Operations.minor">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.RecordApplicationEventAsync_Operations.operation">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.RecordApplicationEventAsync_Operations.recordApplicationEventAsync_OperationsExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.RecordApplicationEventAsync_OperationType">
            <remarks/>
        </member>
        <member name="F:CSAAWeb.ArcSightReference.RecordApplicationEventAsync_OperationType.Record">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ResponseSort">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ResponseSort.sortBy">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ResponseSort.sortDirection">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ResponseSort.responseSortExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.SortDirection">
            <remarks/>
        </member>
        <member name="F:CSAAWeb.ArcSightReference.SortDirection.Descending">
            <remarks/>
        </member>
        <member name="F:CSAAWeb.ArcSightReference.SortDirection.Ascending">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.ServiceOptions">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ServiceOptions.echoBackRequest">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ServiceOptions.startPaginationInstance">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ServiceOptions.maximumReturnedInstances">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ServiceOptions.serviceResponseSort">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.ArcSightReference.ServiceOptions.serviceOptionsExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.ArcSightReference.RecordApplicationEventAsyncCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService.#ctor">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService.RecordApplicationEventAsync(CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest)">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService.RecordApplicationEventAsyncAsync(CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest)">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService.RecordApplicationEventAsyncAsync(CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest,System.Object)">
            <remarks/>
        </member>
        <member name="M:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncService.RecordApplicationEventAsyncCompleted">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.applicationContext">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.options">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.operations">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.filters">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.technicalCriteria">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.logLevel">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.requestorName">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.recordApplicationEventAsync_choice">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsyncRequest.recordApplicationEventAsyncRequestExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ApplicationContext">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.userId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.transactionType">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.application">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.subSystem">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.address">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.correlationId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationContext.applicationContextExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ExtensionArea">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ExtensionArea.Any">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ApplicationMessage">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.version">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.application">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.subsystem">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.module">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.userId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.address">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.correlationId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.errorCode">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.detailedMessage">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessage.applicationMessageExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ApplicationMessageExtension">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessageExtension.timestamp">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessageExtension.eventMessage">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ApplicationMessageExtension.applicationMessageExtensionExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ObjectProperty">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ObjectProperty.name">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ObjectProperty.value">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ObjectProperty.objectPropertyExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.CEFEvent">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.version">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.deviceVendor">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.deviceProduct">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.deviceVersion">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.signatureId">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.name">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.severity">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.extension">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.CEFEvent.cEFEventExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.recordApplicationEventAsync_choice">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsync_choice.event">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.recordApplicationEventAsync_choice.message">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.RecordApplicationEventAsync_Operations">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.RecordApplicationEventAsync_Operations.minor">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.RecordApplicationEventAsync_Operations.operation">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.RecordApplicationEventAsync_Operations.recordApplicationEventAsync_OperationsExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.RecordApplicationEventAsync_OperationType">
            <remarks/>
        </member>
        <member name="F:CSAAWeb.Arcsightreference.RecordApplicationEventAsync_OperationType.Record">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ResponseSort">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ResponseSort.sortBy">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ResponseSort.sortDirection">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ResponseSort.responseSortExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.SortDirection">
            <remarks/>
        </member>
        <member name="F:CSAAWeb.Arcsightreference.SortDirection.Descending">
            <remarks/>
        </member>
        <member name="F:CSAAWeb.Arcsightreference.SortDirection.Ascending">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.ServiceOptions">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ServiceOptions.echoBackRequest">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ServiceOptions.startPaginationInstance">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ServiceOptions.maximumReturnedInstances">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ServiceOptions.serviceResponseSort">
            <remarks/>
        </member>
        <member name="P:CSAAWeb.Arcsightreference.ServiceOptions.serviceOptionsExtension">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.Arcsightreference.RecordApplicationEventAsyncCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:CSAAWeb.WebControls.BaseXmlReport">
            <summary>
            Provides a control that generates a report through an xml transform.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.BaseXmlReport.XmlSource">
            <summary>The data to transform.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.BaseXmlReport.XmlExtendedAttributes">
            <summary>Optional Extended attribute data.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.BaseXmlReport.Embedded">
            <summary>Set to true if the component should not clear the Response stream.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.BaseXmlReport.Xslt">
            <summary>The XSLT stylesheet used to perform the transform.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.BaseXmlReport.Title">
            <summary>The title to insert into the transformed document.</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.BaseXmlReport.#cctor">
            <summary>
            Gets the default locations for the default transforms.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.BaseXmlReport.OnInit(System.EventArgs)">
            <summary>
            Gets the locations for the transforms.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.BaseXmlReport.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Generates the report from the supplied recordset or Sql Proc name.
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.HiddenInput">
            <summary>
            A Custom control for a hidden element.
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.IHideable">
            <summary>
            Classes that implement IHideable know how to render themselves and 
            their child controls as hidden form elements, and have special handling
            of validation.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.IHideable.SaveContext">
            <summary>Saves values of the control into the Context.Items collection</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.IHideable.Hidden">
            <summary>True if the control should render as a hidden</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.#ctor(System.String,System.String)">
            <summary>Constructor accepting id and text properties.</summary>
            <param name="id">The ID of the control.</param>
            <param name="Value">The value for Text property</param>
        </member>
        <member name="F:CSAAWeb.WebControls.HiddenInput.text">
            <summary>Backer for Text property</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.HiddenInput._AutoRestore">
            <summary>Backer for AutoRestore property</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.HiddenInput._Encrypted">
            <summary>Backer for Encrypted property</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.SaveContext">
            <summary>
            Saves the value into the context.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control to the output parameter specified.
            </summary>
            <param name="output"> The HTML writer to write out to </param>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.OnInit(System.EventArgs)">
            <summary>Initialize event method</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            IPostBackDataHandler.LoadPostData.  Restores Text from the Request.Form
            </summary>
            <param name="postDataKey">The key to lookup</param>
            <param name="postCollection">Complete collection of postback values</param>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.RaisePostDataChangedEvent">
            <summary>
            IPostBackDataHandler.RaisePostDataChangedEvent.  Does nothing, since viewstate
            is always disabled for this control type.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenInput.RestoreValue(System.String)">
            <summary>
            Restores the value for item from the context items.
            </summary>
            <param name="item">The item to restore.</param>
            <returns>string value.</returns>
        </member>
        <member name="P:CSAAWeb.WebControls.HiddenInput.Hidden">
            <summary>IHideable.Hidden.  Always true for this type.</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.HiddenInput.Encrypted">
            <summary>True if the value should be encrypted when rendered.</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.HiddenInput.DesignMode">
            <summary>Returns true if the page is in design mode.</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.HiddenInput.Text">
            <summary>The value of the hidden element.</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.HiddenInput.AutoRestore">
            <summary>True if the element should try to find a value in the context after Server.Transfer</summary>
        </member>
        <member name="T:CSAAWeb.WebControls.Design.HiddenDesigner">
            <summary>
            Designer for Hidden Input class.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Design.HiddenDesigner.Style">
            <summary>Style string</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Design.HiddenDesigner.GetDesignTimeHtml">
            <summary>
            Generates normal design time HTML
            </summary>
            <returns>HTML string</returns>
        </member>
        <member name="M:CSAAWeb.WebControls.Design.HiddenDesigner.GetEmptyDesignTimeHtml">
            <summary>
            Generates DesignTime HTML if no properties set.
            </summary>
            <returns>HTML string</returns>
        </member>
        <member name="T:CSAAWeb.WebControls.Html">
            <summary>
            A Custom control for server Html.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Html.#ctor">
            <summary>Default constructor</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Html.#ctor(System.String,System.String)">
            <summary>Constructor accepting id and text properties.</summary>
            <param name="id">The ID of the control.</param>
            <param name="Value">The value for Text property</param>
        </member>
        <member name="F:CSAAWeb.WebControls.Html.Text">
            <summary>The value of the hidden element.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Html.MaxLength">
            <summary>If greater than 0, will chop the output.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Html.AllowHtml">
            <summary>If false will remove any html tags.</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Html.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control to the output parameter specified.
            </summary>
            <param name="output"> The HTML writer to write out to </param>
        </member>
        <member name="T:CSAAWeb.WebControls.HiddenControls">
            <summary>
            HiddenControls contains class methods that can be methods used by IHideable
            classes to assist in rendering hidden controls.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenControls.HideChildControls(System.Web.UI.Control,System.Boolean)">
            <summary>
            Sets the child controls' hidden property.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenControls.SaveChildContext(System.Web.UI.Control)">
            <summary>
            Calls IHideable.SaveContext on any hideable child controls.
            </summary>
            <param name="H"></param>
        </member>
        <member name="F:CSAAWeb.WebControls.HiddenControls.BeginTag">
            <summary>
            Default tabs for Hidden controls
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenControls.RenderHidden(System.Web.UI.HtmlTextWriter,System.String,System.String)">
            <summary>
            Outputs a hidden control with the specified name and value.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenControls.RenderControlAsHidden(System.Web.UI.HtmlTextWriter,System.Web.UI.Control)">
            <summary>
            Renders a non-hidden, non-IHideable web form control as a hidden element or set
            of hidden elements.
            </summary>
            <param name="output"></param>
            <param name="C"></param>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenControls.RenderSingleItemList(System.Web.UI.HtmlTextWriter,System.Web.UI.WebControls.ListControl)">
            <summary>
            Renders the hidden elements for a single item list.
            </summary>
            <param name="output">Output stream to render to</param>
            <param name="C">The control to render.</param>
        </member>
        <member name="M:CSAAWeb.WebControls.HiddenControls.RenderList(System.Web.UI.HtmlTextWriter,System.Web.UI.WebControls.ListControl)">
            <summary>
            Renders a series of hidden elements for a multi-select type of list.
            </summary>
            <param name="output">Output stream to render to</param>
            <param name="C">The control to render.</param>
        </member>
        <member name="T:CSAAWeb.WebControls.ListC">
            <summary>
            Class contains methods for setting and retrieving the "Value Property" of
            ListControl Controls, which cannot natively do this.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ListC.GetListValue(System.Web.UI.WebControls.ListControl)">
            <summary>
            Returns the value of the selected item.
            </summary>
            <param name="C">Control to get value from</param>
            <returns>The Value of the control.</returns>
        </member>
        <member name="M:CSAAWeb.WebControls.ListC.SetListIndex(System.Web.UI.WebControls.ListControl,System.String)">
            <summary>
            Sets the selectedindex of the control to the item that
            matches value, if any.
            </summary>
            <param name="C">The control to set the value of.</param>
            <param name="Value">Value to match</param>
        </member>
        <member name="T:CSAAWeb.WebControls.Renderer">
            <summary>
            Provides a static method that allows a control to be rendered to a string.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Renderer.Render(System.Web.UI.Control)">
            <summary>
            Renders C to a string.
            </summary>
            <param name="C">The control to render.</param>
            <returns>String of rendered control.</returns>
        </member>
        <member name="M:CSAAWeb.WebControls.Renderer.Render(System.String,System.Web.UI.Page)">
            <summary>
            Renders URL to a string by calling Server.Execute()
            </summary>
            <param name="Url">The URL to execute</param>
            <param name="Page">The executing page to render from.</param>
            <returns>String of rendered control.</returns>
        </member>
        <member name="T:CSAAWeb.WebControls.DataBinder">
            <summary>
            Provides a static method for rendering columns from child rows in a container's 
            DataItem.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DataBinder.#cctor">
            <summary/>
        </member>
        <member name="M:CSAAWeb.WebControls.DataBinder.Eval(System.Object,System.String,System.String,System.String)">
            <summary>
            Evaluates data-binding expressions at runtime and formats the result as text to be 
            displayed in the requesting browser.
            </summary>
            <param name="DataItem">
            The object reference against which the expression is evaluated. 
            This must be a valild object identifier in the page's specified language,
            and furthermore, this must evaluate to a DataRowView which contains
            a relation (Relationship) to another DataTable in the DataSet.
            </param>
            <param name="Column">The column name of the column to use in the related DataTable</param>
            <param name="Format">Format string to use, including the separator.</param>
            <param name="Relationship">Name of the relationship between the two data tables.</param>
            <returns>String concatenating the values from the related table.</returns>
        </member>
        <member name="T:CSAAWeb.WebControls.DefaultSummary">
            <summary>
            Validator that checks all the other validators on the page.  This only looks
            at Validators that have no ErrorMessage set.  If any exists that isn't valid,
            this validator will be Not Valid, allowing its error message to show if there
            is a summary control on the page.
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.Validator">
            <summary>
            Validator is a custom control validator control.  It has similarities
            to the System.Web.UI.WebControls.CustomValidator, but extends the
            capability to check multiple controls, and renders differently, in
            that if the Display property is "Static" (default) it will always show
            on the page, just using different classes (or colors by default),
            to display error or OK.  There is also a default evaluator, which
            will work the same as the "RequiredValidator" if no OnServerValidate
            delegate is supplied.   The OnServerValidate event receives the control to validate
            in its args instead of the text value supplied to the event by CustomValidator.
            Note: The public field Validated is initially set to TRUE!  The page's Validate method
            should be overriden, and all the validators of this type should have this field set to
            false prior to calling base.validate().  This allows any recursive validators to function
            properly, while still preventing validation if Page.Validate isn't called, such as from
            a button whose CausesValidation property is false.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._ErrorClass">
            <summary>Backer for ErrorClass property</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._Tag">
            <summary>Backer for Tag property</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator.Any">
            <summary>True if the control should fail for on any invalid control.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator.Validated">
            <summary>
            True if the Validate method has been called.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator.Validating">
            <summary>True if validation is in process (prevents infinite loop in recursion.).</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._Hidden">
            <summary>Backer for Hidden</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator.Initialized">
            <summary>True if base class is initialized.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._DefaultAction">
            <summary>Backer for DefaultAction property.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._RequiredIndicator">
            <summary>Backer for RequiredIndicator property.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._DefaultClass">
            <summary>Backer for DefaultClass properyt.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._DefaultErrorClass">
            <summary>Backer for DefaultErrorClass property.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.Validator._DefaultTag">
            <summary>Backer for DefaultTag property</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.OnLoad(System.EventArgs)">
            <summary>
            Sets specific properties of this control.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.SaveContext">
            <summary>
            IHideable.SaveContext.  Does nothing.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.ControlPropertiesValid">
            <summary>
            Always returns true.  Allows for custom OnServerValidate with controls
            that may not have validation attribute, as well as with no control
            specified.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Override of default Render insures that control is rendered unless
            Display=None or Hidden=true.  Default won't if control is valid.  Also 
            allows control to have child controls within its boundaries, including 
            server ASP tags, which the default doesn't.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Override of vase RenderBeginTag.  Creates the tag just the way we want it
            for this type of validator.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.OnServerValidate(CSAAWeb.WebControls.ValidatorEventArgs)">
            <summary>
            Fires the ServerValidate Event(s).  Deligates can be added by using
            this method name as an HTML attribute in the server control definition tag
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.EvaluateIsValid">
            <summary>
            Returns true if the validation event is true for all the controls listed
            in ControlToValidate.  Sets Validated to true when finished.
            </summary>
            <exception cref="T:CSAAWeb.WebControls.ValidatorCircularException">
            Thrown if method is called recursively on the same object.  Means that
            one of the controls being validated is dependant on itself.  Could be
            through multiple levels.
            </exception>
            <exception cref="T:CSAAWeb.WebControls.ValidatorNotDefinedException">
            Thrown if neither OnServerValidate property or ControlToValidate property 
            is set.  At least one of the two must be set.  Default value will be used
            for OnServerValidate if only ControlToValidate is set.  This control will
            be supplied to OnServerValidate delegate if on OnServerValidate is set.
            </exception>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.EvaluateIsValid(System.String)">
            <summary>
            Builds ValidatorEventArgs calls OnServerValidate with a ValidateEventArgs object
            for ControlID.
            </summary>
            <param name="ControlID">The ID of the control to validate.</param>
            <returns>The returned IsValid property from the ValidateEventArgs</returns>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.CompleteValidation(System.Boolean)">
            <summary>
            Helper function for completing EvaluateIsValid.  Sets the Validating
            and Validated properties, then returns result.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.DefaultOnServerValidate(System.Object,CSAAWeb.WebControls.ValidatorEventArgs)">
            <summary>
            Default delegate used for validating if none is supplied by the server
            control tag.  Performs the action specified by
            the DefaultAction property to evalute C.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.MarkInvalid(System.Web.UI.Control)">
            <summary>
            If C is a WebControl, will add the invalid=true attribute to it.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.IsMarkedInvalid(System.Web.UI.Control)">
            <summary>
            Returns true if the control already has an attribute "invalid"
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.MarkInvalid">
            <summary>
            Sets the IsValid property to false, and marks the first control to validate
            as invalid.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.RequiredControlValid(System.Web.UI.Control)">
            <summary>
            Helper function for validating.  Returns true if the control
            contains a value.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.Validator.FindControl(System.String)">
            <summary>
            Returns the control referenced by id.  ID may be dot notated to return
            a control within a control, but the dot notation may only be one-level deep.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.RequiredIndicator">
            <summary>
            A string appended to all labels that have DefaultAction of Required.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.DefaultClass">
            <summary>
            The CssClass to use if none is specified.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.DefaultErrorClass">
            <summary>
            The ErrorClass string to use if none is specified.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.DefaultTag">
            <summary>
            The tag to use if none is specified.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.Class">
            <summary>
            The CSS Class to use when displaying valid control.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.ErrorClass">
            <summary>
            The CSS Class to use when displaying invalid control.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.Tag">
            <summary>
            The HTML Tag that this control will render.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.Hidden">
            <summary>
            IHideable.Hidden.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.ValidateOn">
            <summary>
            Determines how validator will occur on multiple controls.  If Any, any
            valid control will validate.  If All, all controls must be valid.  Default
            is All.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.DefaultAction">
            <summary>
            Determines the type of check to perform by the default evaluator.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.Validator.IsValid">
            <summary>
            Override of base IsValid.  If called prior to Validate(), will call
            Validate() first.
            </summary>
        </member>
        <member name="E:CSAAWeb.WebControls.Validator.ServerValidate">
            <summary>
            Called for each control to be validated.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.DefaultSummary.ShowFailingControl">
            <summary>
            Set in config, if true this field appends the validator control id
            of the validator that caused this one to be invalid.  Useful for
            debugging.  Default is false.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultSummary.#cctor">
            <summary>
            Static constructor gets the ShowFailingControl value from the config.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultSummary.OnInit(System.EventArgs)">
            <summary>
            Sets specific properties of this control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultSummary.OnPreRender(System.EventArgs)">
            <summary>
            Performs another validation, to insure that any validators that changed state
            after page load have been checked.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultSummary.EmptyValidatorValidate(System.Object,CSAAWeb.WebControls.ValidatorEventArgs)">
            <summary>
            The validation function.
            </summary>
            <param name="source"></param>
            <param name="args"></param>
        </member>
        <member name="P:CSAAWeb.WebControls.DefaultSummary.ErrorMessage">
            <summary>
            Overrides base ErrorMessage property to allow ErrorMessage to be generated within
            begin and end tags if not set by ErrorMessage property.  
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.PageTemplate">
            <summary>
            Template is an extension of the System.Web.UI.Page class which creates a custom
            Response Filter before rendering itself, that will insert template elements into
            the Response stream to give all pages derived from this class a common look and feel.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.PageTemplate.#ctor">
            <summary>
            Constructor adds a PreRender event to the chain.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.PageTemplate.NavACL">
            <summary>
            If the page contains a navigation ACL control, this will be it.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.PageTemplate.SiteRoot">
            <summary>
            Property representing the virtual root of the application.
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.DefaultTemplate">
            <summary>
            DefaultTemplate is a base class for a web control that installs the Response Filter.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.#ctor">
            <summary>
            Constructor creates the filter.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.DefaultTemplate.Filter">
            <summary>
            The filter.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.DefaultTemplate.Output">
            <summary>
            Reference to the actual output stream.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.OnLoad(System.EventArgs)">
            <summary/>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.CreateChildControls">
            <summary>
            Checks to set if there are any other controls of this type and disables
            them if so, to insure that there is only one filter on a page.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.CheckInstalled(System.Web.UI.Control)">
            <summary>
            Returns true if there is already an instance of this filter in the
            Controls collection of ToCheck
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.Disable">
            <summary>
            Disables this control.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control to the output parameter specified.
            </summary>
            <param name="output"> The HTML writer to write out to </param>
        </member>
        <member name="M:CSAAWeb.WebControls.DefaultTemplate.OnUnload(System.EventArgs)">
            <summary>
            Insures that the output is flushed and set to null.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatingUserControl">
            <summary>
            ValidatingUserControl is base class for combination component 
            that includes a validating label and perhaps some other validators.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatingUserControl.LabelValidator">
            <summary>The validating label for this control.</summary>
            Added as a part of .Net migration 3.5
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatingUserControl.Validators">
            <summary>
            Collection of all the validators associated with this control
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.CheckValue">
            <summary>
            CheckValue returns true if the combined control value is a valid value.
            Should be overridden in derived classes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.SaveContext">
            <summary>
            IHideable.SaveContext.  Saves Hideable child controls to the context.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.CheckValid(System.Object,CSAAWeb.WebControls.ValidatorEventArgs)">
            <summary>
            CheckValid is a delegate for a validator control that will call CheckValue
            if all the other Validators are valid and the Text property isn't blank.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.MarkInvalid">
            <summary>
            Call to set this control to invalid and highlight its labelvalidator.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.EnableValidators(System.Boolean)">
            <summary>
            Enables or disables all the validators contained herein
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.Page_Load(System.Object,System.EventArgs)">
            <summary>
            Called on page load.  Base implementation does nothing, to be overridden
            in derived classes.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.FormatErrorMessage(CSAAWeb.WebControls.Validator)">
            <summary>
            Does some parameter substitution in the ErrorMessage property of
            each of the validators, so that the message contains a valid reference 
            to which control it is applicable to.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.DisableLabel">
            <summary>
            Called whenever control isn't required.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.OnInit(System.EventArgs)">
            <summary>
            Required by the Designer.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatingUserControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Override of base Render, this method provides for automatic generation of
            hidden form elements for contained controls when the hidden property is true.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatingUserControl.Text">
            <summary>
            This is the complete combined value of all the controls contained herein.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatingUserControl.Label">
            <summary>
            Label is the text lable to appear over the combined control
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatingUserControl.IsValid">
            <summary>
            IsValid will be true if all the validators in the control are valid
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatingUserControl.Required">
            <summary>
            Set this property to true if the control must contain a value.
            </summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatingUserControl.Hidden">
            <summary>
            True if the control should render as hidden elements.  
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorEventHandler">
            <summary>
            Delegate definition for Validator.OnServerValidate Event
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorEventArgs">
            <summary>
            EventArgs for Validator.OnServerValidate Event
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorEventArgs.IsValid">
            <summary>True if the case is valid.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorEventArgs.Check">
            <summary>The control to check</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatorEventArgs.#ctor(System.Web.UI.Control)">
            <summary>Constructor accepting the control to check</summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorValidateOn">
            <summary>
            Enum for Validator.ValidateOn property.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorValidateOn.Any">
            <summary>
            Validates if any of the ControlToCheck controls are valid.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorValidateOn.All">
            <summary>
            All ControlToCheck must be valid to validate.
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorDefaultAction">
            <summary>
            Enum for Validator.DefaultAction property.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.Required">
            <summary>
            Validator will insure that a value has been entered.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.Numeric">
            <summary>
            Validator will insure that the value is numeric.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.Succeed">
            <summary>
            Validator will always succeed.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.MaxLength">
            <summary>
            Validator will insure that the length isn't greater than 
            the max length property
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.ExactLength">
            <summary>
            Validator will insure that the length is exactly
            the max length property
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.AlphaNumeric">
            <summary>
            Validator will insure that the value contains only numbers and letters.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorDefaultAction.Decimal">
            <summary>
            Validator will insure that the value is a valid number with a decimal.  May
            be negative.
            </summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorCircularException">
            <summary>
            Thrown if method is called recursively on the same object.  Means that
            one of the controls being validated is dependant on itself.  Could be
            through multiple levels.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorCircularException.ID">
            <summary>The id of the offending control.</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatorCircularException.#ctor(System.String)">
            <summary>Constructor accepting offending control's ID.</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatorCircularException.Message">
            <summary>The error message</summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorNotDefinedException">
            <summary>
            Thrown if neither OnServerValidate property or ControlToValidate property 
            is set.  At least one of the two must be set.  Default value will be used
            for OnServerValidate if only ControlToValidate is set.  This control will
            be supplied to OnServerValidate delegate if on OnServerValidate is set.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorNotDefinedException.ID">
            <summary>The offending control's ID></summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatorNotDefinedException.#ctor(System.String)">
            <summary>Constructor accepting the offending control's ID.</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatorNotDefinedException.Message">
            <summary>The error message</summary>
        </member>
        <member name="T:CSAAWeb.WebControls.ValidatorNotFoundException">
            <summary>
            Thrown while looping through the items in ControlToValidate if an item can't
            be found.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorNotFoundException.ID">
            <summary>The offending control's ID.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.ValidatorNotFoundException.ControlID">
            <summary>The ID that was being looked for.</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.ValidatorNotFoundException.#ctor(System.String,System.String)">
            <summary>Constructor accepting the offending control's ID and the ID being sought</summary>
        </member>
        <member name="P:CSAAWeb.WebControls.ValidatorNotFoundException.Message">
            <summary>The error message</summary>
        </member>
        <member name="T:CSAAWeb.WebControls.AdoXmlReport">
            <summary>
            Summary description for XmlReport.
            </summary>
        </member>
        <member name="F:CSAAWeb.WebControls.AdoXmlReport.Sql">
            <summary>Stored procedure name to execute.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.AdoXmlReport.ConnectionName">
            <summary>Name of the the connection string key in web.config.</summary>
        </member>
        <member name="F:CSAAWeb.WebControls.AdoXmlReport.oRs">
            <summary>An open recordset which can be supplied instead of Sql.</summary>
        </member>
        <member name="M:CSAAWeb.WebControls.AdoXmlReport.Finalize">
            <summary>
            Ensures that any internal objects are released.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.AdoXmlReport.OpenConnection(ADODB.Connection@)">
            <summary>
            Creates the connection object and opens it with the specified connection string.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.AdoXmlReport.OpenRecordset(ADODB.Command)">
            <summary>
            Creates a recordset object, creates a command object and opens the recordset
            with the command.
            </summary>
            <param name="oCmd"></param>
        </member>
        <member name="M:CSAAWeb.WebControls.AdoXmlReport.CreateCommand(ADODB.Connection@)">
            <summary>
            Creates and returns a command object on oConn
            from the stored procedure specified in the Sql property.
            Fills the stored procedure parameters from either the request.querystring
            or request.form collection depending on whether the page is post or get.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.AdoXmlReport.GetSource">
            <summary>
            Extracts the data contained in the ADO recordset and stores it in 
            XmlSource.  If there is another recordset, then the first was actually
            Extended attributes metadata, so that document is move to XmlExtendedAttributes,
            and the data in the second recordset is store into XmlSource.
            </summary>
        </member>
        <member name="M:CSAAWeb.WebControls.AdoXmlReport.OnPreRender(System.EventArgs)">
            <summary>
            Generates the report from the supplied recordset or Sql Proc name.
            </summary>
        </member>
        <member name="T:CSAAWeb.Web.ClosableModule">
             <summary>
             Module automatically closes objects of type IClosableWeb. Web Services based on
             SqlWebService implement this interface.  Web Pages can also be built that implement
             this interface to close any open Sql connections within the Close Method.
             </summary>
             <remarks>
             <para>
             ClosableModule must be installed within an application through web.config, in the httpModules
             section of the system.web configuration section.  
             </para>
             <seealso cref="T:CSAAWeb.Web.IClosableWeb"/>
             <seealso cref="T:CSAAWeb.Web.SqlWebService"/>
             </remarks>
             
             <example>
             <para>Here is a sample web.config file for using ClosableModule:</para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            
                &lt;system.web&gt;
                    &lt;!--Install ClosableModule with the following tag:--&gt;
            
                    &lt;httpModules&gt;
                        &lt;add name="ClosableModule" type="CSAAWeb.Web.ClosableModule, CSAAWeb"/&gt;
                    &lt;/httpModules&gt;
            
                 &lt;/system.web&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.#ctor">
            <summary>Default constructor for ClosableModule</summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.#ctor(System.Web.HttpApplication)">
            <summary>Constructs instance of ClosableModule and calls Init.</summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.Init(System.Web.HttpApplication)">
            <summary>
            Implements IHttpModule.Init.  Hooks to Application_OnBeginRequest,
            Application_OnError, Application_PostRequestHandlerExecute and
            Application_EndRequest.
            </summary>
        </member>
        <member name="F:CSAAWeb.Web.ClosableModule.Handlers">
            <summary>Placeholder for IClosable page to install itself.</summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.Handle(CSAAWeb.Web.IClosableWeb)">
            <summary>
            Call this method from a web service that needs to be closed.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.SetHandler(CSAAWeb.Web.IClosableWeb)">
            <summary>
            Call this method from a web service that needs to be closed. Will throw
            an exception if module isn't installed.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.StopHandle(CSAAWeb.Web.IClosableWeb)">
            <summary>
            Removes H from the list that needs to be closed.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.RemoveHandler(CSAAWeb.Web.IClosableWeb)">
            <summary>
            Call this method from a web service that needs to be closed.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.CheckClose(System.Object,System.EventArgs)">
            <summary>
            Called on PostRequestHandlerExecute event;
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ClosableModule.Dispose">
            <summary>Implements IHttpModule.Dispose.</summary>
        </member>
        <member name="P:CSAAWeb.Web.ClosableModule.Closer">
            <summary>
            Returns the current Instance from the context.
            </summary>
        </member>
        <member name="T:CSAAWeb.Web.ExtendableModuleCollection">
            <summary>
            Class used by HttpApplication to allow progamatic addition of
            Modules, since ASP.NET modules collection is read only.
            </summary>
        </member>
        <member name="F:CSAAWeb.Web.ExtendableModuleCollection.Modules">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Web.ExtendableModuleCollection.ExtraModules">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Web.ExtendableModuleCollection.ModuleKeys">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Web.ExtendableModuleCollection.#ctor(System.Web.HttpModuleCollection)">
            <summary>
            Constructor creates new instance of class and adds all the
            modules in M to its collection.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ExtendableModuleCollection.Add(System.Web.IHttpModule)">
            <summary>Adds Module to the collection of modules.</summary>
        </member>
        <member name="M:CSAAWeb.Web.ExtendableModuleCollection.Dispose">
            <summary>
            Calls Dispose on all the added modules, but not the original
            modules provided to the constructor.  Allows ASP.NET to dispose of
            them
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ExtendableModuleCollection.Contains(System.String)">
            <summary>Returns true if the module is installed.</summary>
        </member>
        <member name="P:CSAAWeb.Web.ExtendableModuleCollection.Item(System.String)">
            <summary>Returns the module Name.</summary>
        </member>
        <member name="P:CSAAWeb.Web.ExtendableModuleCollection.Item(System.Int32)">
            <summary>Returns the module at index</summary>
        </member>
        <member name="T:CSAAWeb.Web.ExtendableHttpApplication">
            <summary>
            Base class for a web application that permits the programmatic addition
            of new HttpModules via the ModulesX property <see cref="T:CSAAWeb.Web.ExtendableModuleCollection"/>.  
            This allows applications to be built that require specific modules and will install them
            even if not provided in web.config.
            </summary>
        </member>
        <member name="F:CSAAWeb.Web.ExtendableHttpApplication.ModulesX">
            <summary>
            All the modules in this, included ones added internally
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.ExtendableHttpApplication.Dispose">
            <summary>Disposes of any extra modules.</summary>
        </member>
        <member name="T:CSAAWeb.Web.HttpApplication">
            <summary>
            HttpApplication Class that automatically adds HttpsModule, LogModule and ClosableModule
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpApplication.Init">
            <summary>
            Init adds BeginRequest and Error events.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpApplication.Application_End(System.Object,System.EventArgs)">
            <summary>Application OnEnd event.  Artifact from previous implementation.</summary>
        </member>
        <member name="T:CSAAWeb.Web.HttpsModule">
             <summary>Module allows for forcing https and requiring client certificates.</summary>
             
             <remarks>
             <para>
             HttpsModule must be installed within an application through web.config, in the httpModules
             section of the system.web configuration section.  
             The ForceSecure settings in the appSettions section that controls operation.  See
             the example web.config file below.  See <see cref="T:CSAAWeb.Web.RequireHttps"/> for the possible
             values for ForceSecure.
             The RequireCertificate setting in the appSettins section controls when a client certificate
             is required.
             The Certificates setting is a comma-delimited list of certificate serial numbers that will be accepted.
             </para>
             <seealso cref="T:CSAAWeb.Web.RequireHttps"/>
             </remarks>
             
             <example>
             <para>Here is a sample web.config file for using HttpsModule:</para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            
                &lt;appSettings&gt;
                    &lt;!-- https --&gt;
                    &lt;add key="ForceSecure" value="Remote"/&gt;
                    &lt;add key="RequireCertificate" value="RemoteService"/&gt;
                    &lt;add key="Certificates" value=""/&gt;
                &lt;/appSettings&gt;
                
                &lt;system.web&gt;
                    &lt;!--Install HttpsModule with the following tag:--&gt;
            
                    &lt;httpModules&gt;
                        &lt;add name="HttpsModule" type="CSAAWeb.Web.HttpsModule, CSAAWeb"/&gt;
                    &lt;/httpModules&gt;
            
                 &lt;/system.web&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.#ctor">
            <summary>Default Constructor for HttpsModule</summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.#ctor(System.Web.HttpApplication)">
            <summary>Constructs instance of HttpsModule and calls Init.</summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.Init(System.Web.HttpApplication)">
            <summary>Implements IHttpModule.Init.  Hooks to Application_OnBeginRequest.</summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.Dispose">
            <summary>Implements IHttpModule.Dispose.</summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.OnBeginRequest(System.Object,System.EventArgs)">
            <summary>
            BeginRequest event handler checks to insure that the call is
            using https unless its localhost.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.HttpsModule.Redirect(System.Web.HttpApplication)">
            <summary>Redirects the request to a secure connection.</summary>
        </member>
        <member name="P:CSAAWeb.Web.HttpsModule.Certificates">
            <summary>Setting specifies when to require a certificate.</summary>
        </member>
        <member name="P:CSAAWeb.Web.HttpsModule.RequireCertificate">
            <summary>Setting specifies when to require a certificate.</summary>
        </member>
        <member name="P:CSAAWeb.Web.HttpsModule.ForceSecure">
            <summary>Setting specifies when to force https mode.</summary>
        </member>
        <member name="T:CSAAWeb.Web.RequireHttps">
            <summary>Specifies when Https is required for the application.</summary>
        </member>
        <member name="F:CSAAWeb.Web.RequireHttps.All">
            <summary>Require Https for all requests</summary>
        </member>
        <member name="F:CSAAWeb.Web.RequireHttps.AllService">
            <summary>Require Https for all service requests.</summary>
        </member>
        <member name="F:CSAAWeb.Web.RequireHttps.Remote">
            <summary>Require Https only for requests not from same computer.</summary>
        </member>
        <member name="F:CSAAWeb.Web.RequireHttps.RemoteService">
            <summary>Require Https only for service requests not from same computer.</summary>
        </member>
        <member name="F:CSAAWeb.Web.RequireHttps.None">
            <summary>Don't require Https for any request.  (Default)</summary>
        </member>
        <member name="T:CSAAWeb.Web.LogModule">
             <summary>
             Module intercepts and logs all unhandled exceptions on pages and web services.
             </summary>
             
             <remarks>
             <para>
             LogModule must be installed within an application through web.config, in the httpModules
             section of the system.web configuration section.  CustomErrors must also be turned
             off.  There are several settings in the appSettions section that control operation.  See
             the example web.config file below.
             </para>
             <para>
             See <see cref="T:CSAAWeb.AppLogger.Logger"/> for more information about logging, and for registry values
             to permit logging to the Application Event log instead of to a file.
             </para>
             <seealso cref="T:CSAAWeb.AppLogger.Logger"/>
             <seealso cref="M:CSAAWeb.Config.ExpandedSetting(System.String)"/>
             <seealso cref="T:CSAAWeb.Queue"/>
             </remarks>
             
             <example>
             <para>Here is a sample web.config file for using LogModule:</para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            
                &lt;appSettings&gt;
                    &lt;!--ApplicationLogPath determines where LogModule will place log files. It can be an absolute path,
                    or it can be an expanded path.  Acceptable variables for expansion are %SiteRootPath% which will	
                    be expanded to a path under the virtual directory of the application or %RootPath% which will be
                    expanded to a path under the web server root. If this value ends with "\", the top level application namespace
                    will be prepended to the file name.  If it is missing, then application will attempt to
                    log into the Application Event Log.  
                    NOTE: VERY IMPORTANT! ASP.NET must have write permissions to this directory!--&gt;
                    &lt;add key="ApplicationLogPath" value="%SiteRootPath%data\Logs\" /&gt;
            
                    &lt;!-- If Error_Url is supplied, then LogModule will redirect to this page after logging
                    any unhandled exception. --&gt;
                    &lt;add key="Error_Url" value="%SiteRoot%error.aspx"/&gt;
            
                    &lt;!-- Log_Errors determines if LogModule will automatically log unhandled exceptions.  By default,
                    Log_Errors is true, so it only needs to be in web.config if you want it to be false.
                    &lt;add key="Log_Errors" value="true"/&gt;
                &lt;/appSettings&gt;
            
                &lt;system.web&gt;
                    &lt;!--Install LogModule with the following tag:--&gt;
            
                    &lt;httpModules&gt;
                        &lt;add name="LogModule" type="CSAAWeb.Web.LogModule, CSAAWeb"/&gt;
                    &lt;/httpModules&gt;
            
                    &lt;!-- customErrors must be set to off to allow LogModule to function.  If it is On or Remote,
                    the ASP.NET built-in Exception handling will execute before LogModule, and LogModule will never
                    be called. --&gt;
                    &lt;customErrors mode="Off" /&gt; 
            
                &lt;/system.web&gt;
            
            &lt;/configuration&gt;
             </code>
             </example>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.#ctor">
            <summary>Default Constructor for LogModule.</summary>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.#ctor(System.Web.HttpApplication)">
            <summary>Constructs instance of LogModule and calls Init.</summary>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.#cctor">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.Init(System.Web.HttpApplication)">
            <summary>
            Implements IHttpModule.Init.  Hooks to Application_OnError event and allows
            Queue to start operation.
            </summary>
            <param name="Application">The HttpApplication instance to which this module belongs.</param>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.Dispose">
            <summary>
            Implements IHttpModule.Dispose.  Allows for stopping Queue's thread when the last
            instance of LogModule is released.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.OnError(System.Object,System.EventArgs)">
            <summary>
            Error event handler that captures and logs if required any unhandled
            exceptions.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.IsSoapServiceRequest(System.Web.HttpRequest)">
            <summary>Returns true if the request appears to be a soap request.</summary>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.ReadStream(System.IO.Stream)">
            <summary>Returns the contents of stream S as a string</summary>
        </member>
        <member name="M:CSAAWeb.Web.LogModule.SoapFault(System.Exception,System.Web.HttpApplication)">
            <summary>
            Outputs e as a SOAP fault.
            </summary>
        </member>
        <member name="T:CSAAWeb.Web.UrlInfo">
            <summary>
            Class used to save Urls and credential for connecting to web services.
            </summary>
        </member>
        <member name="F:CSAAWeb.Web.UrlInfo.Url">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Web.UrlInfo.Credential">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Web.UrlInfo.LogInternalInvoke">
            <summary/>
        </member>
        <member name="F:CSAAWeb.Web.UrlInfo.Local">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Web.UrlInfo.#ctor(System.String,System.Net.ICredentials)">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Web.UrlInfo.#ctor(System.Reflection.ConstructorInfo,System.Boolean)">
            <summary/>
        </member>
        <member name="T:CSAAWeb.Web.SqlWebService">
            <summary>
            Summary description for SqlWebService.
            </summary>
        </member>
        <member name="F:CSAAWeb.Web.SqlWebService.ConnectionCache">
            <summary>All the connection strings used by the various services.</summary>
        </member>
        <member name="F:CSAAWeb.Web.SqlWebService.TransCache">
            <summary>Transactions are stored here for multi-step transactions.</summary>
        </member>
        <member name="F:CSAAWeb.Web.SqlWebService.oConn">
            <summary>Connection object used by the service.</summary>
        </member>
        <member name="F:CSAAWeb.Web.SqlWebService.TransIndex">
            <summary>Index to the Transaction in the cache</summary>
        </member>
        <member name="F:CSAAWeb.Web.SqlWebService.ExtTrans">
            <summary>Set to true if this transaction is extended beyond the web service boundary.</summary>
        </member>
        <member name="F:CSAAWeb.Web.SqlWebService.ParametersPreCached">
            <summary>This will be true once PreCacheParameters has been called.</summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.#cctor">
            <summary/>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.#ctor">
            <summary>
            Default constructor, opens the connection.  Checks to see if the class is
            initialized, and initializes it first if not.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.CheckConnection">
            <summary>
            Opens the database connection if needed
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.Close(System.Object,System.EventArgs)">
            <summary>
            Closes the connection and rollsback any open transaction.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.Close">
            <summary>
            Closes the connection and rollsback any open transaction.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.InitializeClass(System.Type)">
            <summary>
            Gets the connection information for the class and caches the parameters.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.GetConnectionInfo(System.String)">
            <summary>
            Looks for the service in web.config and creates an entry in ConnectionCache for it.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.PreCacheParameters">
            <summary>
            Retrieves parameter information for
            some stored procs that will be called later that have large 
            numbers of parameters being retrieved automatically.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.CacheParameters(System.String[])">
            <summary>
            Retrieves parameter information for
            some stored procs that will be called later that have large 
            numbers of parameters being retrieved automatically.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.GetCommand(System.String)">
            <summary>
            Returns a command object for the stored proc.  Fills the parameters collection
            from the previously retrieved parameters collection Ps.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.StartTransaction">
            <summary>
            Call this method to begin a new transaction.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.CompleteTransaction(System.Boolean)">
            <summary>
            Call this method to end a transaction.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.SetExtendedTransaction">
            <summary>
            call this to extend the existing transaction beyond the web service boundary.
            </summary>
            <returns>Index of the process transaction for future complete calls.</returns>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.CompleteTransaction(System.Int32,System.Boolean)">
            <summary>
            Completes a previous extended transaction.
            </summary>
            <param name="Commit">True to commit the transaction, false to rollback.</param>
            <param name="Index">
            The index of the transaction.  Must have been provided by the
            web method that created the transaction, through a call to SetExtendedTransaction()
            </param>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CSAAWeb.Web.SqlWebService.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="P:CSAAWeb.Web.SqlWebService.Transaction">
            <summary>Optional transaction that can be used by connections.</summary>
        </member>
        <member name="P:CSAAWeb.Web.SqlWebService.ConnectionString">
            <summary>Connection string for this instance.</summary>
        </member>
        <member name="T:CSAAWeb.Web.TemplateModule">
             <summary>Module allows for forcing Template.</summary>
             
             <remarks>
             <para>
             TemplateModule must be installed within an application through web.config, in the httpModules
             section of the system.web configuration section.  
             Several settings in the appSettions section control the operation.  See
             the example web.config file below.  
             </para>
             </remarks>
             
             <example>
             <para>Here is a sample web.config file for using TemplateModule:</para>
             <code>
            &lt;?xml version="1.0" encoding="utf-8" ?&gt;
            &lt;configuration&gt;
            
                &lt;appSettings&gt;
                    &lt;!-- Template --&gt;
                    &lt;add key="Template_Head_End" value="file=%SiteRoot%code/shared/head.ascx"/&gt; 
                    &lt;add key="Template_Body_Start" value="file=%SiteRoot%code/shared/header.ascx"/&gt;
                    &lt;add key="Template_Body_End" value="file=%SiteRoot%code/shared/footer.ascx"/&gt;
                    &lt;add key="Template_Body_onload" value="head_onload()"/&gt;
                    &lt;add key="Template_Body_onunload" value="rememberLocation()"/&gt;
                &lt;/appSettings&gt;
                
                &lt;system.web&gt;
                    &lt;!--Install TemplateModule with the following tag:--&gt;
            
                    &lt;httpModules&gt;
                        &lt;add name="TemplateModule" type="CSAAWeb.Web.TemplateModule, CSAAWeb"/&gt;
                    &lt;/httpModules&gt;
            
                 &lt;/system.web&gt;
            
            &lt;/configuration&gt;
            </code>
            </example>
        </member>
        <member name="M:CSAAWeb.Web.TemplateModule.#ctor">
            <summary>Default Constructor for TemplateModule</summary>
        </member>
        <member name="M:CSAAWeb.Web.TemplateModule.#ctor(System.Web.HttpApplication)">
            <summary>Constructs instance of TemplateModule and calls Init.</summary>
        </member>
        <member name="M:CSAAWeb.Web.TemplateModule.Init(System.Web.HttpApplication)">
            <summary>Implements IHttpModule.Init.  Hooks to Application_OnPreRequestHanderExecute.</summary>
        </member>
        <member name="M:CSAAWeb.Web.TemplateModule.Dispose">
            <summary>Implements IHttpModule.Dispose.</summary>
        </member>
        <member name="M:CSAAWeb.Web.TemplateModule.OnPreRequestHandlerExecute(System.Object,System.EventArgs)">
            <summary>
            OnPreRequestHandler adds a DefaultTemplate control to every page that
            isn't already an instance of PageTemplate and which doesn't implement
            INoTemplate
            </summary>
        </member>
        <member name="T:CSAAWeb.Web.INoTemplate">
            <summary>
            Marker interface for pages that must not be templated in applications using
            Template Module.
            </summary>
        </member>
    </members>
</doc>
